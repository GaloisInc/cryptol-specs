/* Cryptol SHACAL Implementation
   @copyright Galois Inc. 2018
   @author Ajay Kumar Eeralla
   @editor Nichole Schmanski <nls@galois.com>
   @editor Brian Huffman
   @editor Aaron Tomb
   @editor Iavor Diatchki <diatchki@galois.com>
   www.cryptol.net

   Source: https://www.cosic.esat.kuleuven.be/nessie/tweaks.html
   SHACAL: SHACAL-1, blocksize: 160bits, keysize: 512bits, uses SHA-1 (160bits);
           SHACAL-2, block size: 256bits, key size: 512bits, uses SHA-2 (256bits)
*/

module Primitive::Symmetric::Cipher::Block::SHACAL where

import Primitive::Keyless::Hash::SHA2Internal::SHA256

/**SHACAL1**/


type shacal1Block = 160
type shacal1Key = 512



shacal1Encrypt : ([shacal1Key], [shacal1Block]) -> [shacal1Block]
shacal1Encrypt (key, pt) = join (block (pt', key'))
              where pt' = split pt : [5][32]
                    key' = split key : [16][32]

// Helper function to analyse the PGV hash function constructions

shacal1Encrypt160 : ([shacal1Block], [shacal1Block]) -> [shacal1Block]
shacal1Encrypt160 (key, pt) = shacal1Encrypt(key#zero, pt)

shacal1Encrypt512 : ([shacal1Key], [shacal1Key]) -> [shacal1Key]
shacal1Encrypt512 (key, pt) = shacal1Encrypt(key, (take`{160} pt))#zero


//Testing

// //Added 10 test vectors for more vectors, please visit:  https://www.cosic.esat.kuleuven.be/nessie/tweaks.html

property shacal1TestsPass = and [shacal1Encrypt(key, plain) == cipher | (key, plain, cipher) <- tVector1]

tVector1 = [ (0x8#zero, zero, 0x0FFD8D43B4E33C7C53461BD10F27A5461050D90D)
           , (0x4#zero, zero, 0xB9C60AA972B49CA04D5A0D9B9E08B2A2BA138C93)
           , (0x2#zero, zero, 0x3FA618501A3D10E3CAEB3CA06B8B47A16F8E3D9E)
           , (0x1#zero, zero, 0x2B4AFB3268C32F86B89BB745EC85F24702B38498)
           , (0x08#zero, zero, 0x58E782A1D205E53DD2901F0F302F8894D0A3B05B)
           , (0x04#zero, zero, 0xB345AD4DC877D0BFCF760EE25056D21C7DB2F868)
           , (0x02#zero, zero, 0x334C5A595919EA33E5EB467657AAE3ED825207D3)
           , (0x01#zero, zero, 0x5F686F27819DF939F877099A222D01EE955F6E66)
           , (0x008#zero, zero, 0x62BE68D266A28F7E6B44A83E62A476FFD627AF0E)
           , (0x004#zero, zero, 0x2D5265CD2E72B52B6477F341816F2BB554428BC5)]


/**SHACAL2**/



type shacal2Block = 256
type shacal2Key = 512

// Encryption

shacal2Encrypt : ([shacal2Key], [shacal2Block]) -> [shacal2Block]
shacal2Encrypt (key, pt) = join (processBlock_Common pt' key')
              where pt' = split pt : [8][32]
                    key' = split key : [16][32]

// Helper function to analyse the PGV hash function constructions

shacal2Encrypt256 : ([shacal2Block], [shacal2Block]) -> [shacal2Block]
shacal2Encrypt256 (key, pt) = shacal2Encrypt(key#zero, pt)

shacal2Encrypt512 : ([shacal2Key], [shacal2Key]) -> [shacal2Key]
shacal2Encrypt512 (key, pt) = shacal2Encrypt(key, (take`{256} pt))#zero

//Testing
//Added 10 test vectors for more vectors, please visit:  https://www.cosic.esat.kuleuven.be/nessie/tweaks.html

property shacal2TestsPass = and [shacal2Encrypt(key, plain) == cipher | (key, plain, cipher) <- tVector2]

tVector2 = [ (0x8#zero, zero, 0x361AB6322FA9E7A7BB23818D839E01BDDAFDF47305426EDD297AEDB9F6202BAE)
           , (0x4#zero, zero, 0xF3BAF53E5301E08813F8BE6F651BB19E9722151FF15063BA42A6FEF7CF3BF3D7)
           , (0x1#zero, zero, 0xAE70E355CB7E26FF12421F46CDAD5CB98367FE0E86CC234EDF97481765CD1AD9)
           , (0x08#zero, zero, 0x00CECD0B01311F881018E7A20BCE169766C089D91FF161346C4E1BD122EA199F)
           , (0x08#zero, zero, 0x00CECD0B01311F881018E7A20BCE169766C089D91FF161346C4E1BD122EA199F)
           , (0x04#zero, zero, 0x47A879CB6785AD37119C450CD50E9A36FE318FA8E7B6C6E0FA963430122F33CD)
           , (0x02#zero, zero, 0xCF3D53B9F9F7CA2C66738A4C09CEA9212C056F525BDC26F263FBA1B482EDF503)
           , (0x01#zero, zero, 0xA274D404E83E82817389A2CB7B528C792A0E80DE879A5A67DE633B0B7DD57B7B)
           , (0x008#zero, zero, 0x09B3AB9332301D4E3C239D192A4221AFD43F6829A705D396FA96BDE1E716BC38)
           , (0x004#zero, zero, 0xD3B9AB867A6868C4400D200979055C8F9E3A6BFB40D1F9E376B9EC89223D7050)]

f : ([8], [32], [32], [32]) -> [32]
f (t, x, y, z) =
       if (0 <= t)  /\ (t <= 19) then (x && y) ^ (~x && z)
        | (20 <= t) /\ (t <= 39) then x ^ y ^ z
        | (40 <= t) /\ (t <= 59) then (x && y) ^ (x && z) ^ (y && z)
        | (60 <= t) /\ (t <= 79) then x ^ y ^ z
        else error "f: t out of range"

Ks : [80][32]
Ks = [ 0x5a827999 | t <- [0..19]  ]
   # [ 0x6ed9eba1 | t <- [20..39] ]
   # [ 0x8f1bbcdc | t <- [40..59] ]
   # [ 0xca62c1d6 | t <- [60..79] ]

block : ([5][32], [16][32]) -> [5][32]
block ([H0, H1, H2, H3, H4], M) =
 [(H0+As@80), (H1+Bs@80), (H2+Cs@80), (H3+Ds@80), (H4+Es@80)]
  where
    Ws : [80][32]
    Ws = M # [ (W3 ^ W8 ^ W14 ^ W16) <<< 1
             | W16 <- drop`{16 - 16} Ws
             | W14 <- drop`{16 - 14} Ws
             | W8  <- drop`{16 - 8}  Ws
             | W3  <- drop`{16 - 3}  Ws
             | t <- [16..79]
             ]
    As = [H0] # TEMP
    Bs = [H1] # As
    Cs = [H2] # [ B <<< 30 | B <- Bs ]
    Ds = [H3] # Cs
    Es = [H4] # Ds
    TEMP : [80][32]
    TEMP = [ (A <<< 5) + f(t, B, C, D) + E + W + K
           | A <- As | B <- Bs | C <- Cs | D <- Ds | E <- Es
           | W <- Ws | K <- Ks
           | t <- [0..79]
           ]
