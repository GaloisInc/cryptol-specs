/*
 * Cipher Feedback (CFB) mode of operation, as defined in [NIST-SP-800-38A],
 * Section 6.3.
 *
 * CFB mode utilizes an integer parameter, denoted by `s`, such that
 * `1 ≤ s ≤ BlockSize`. The parameter `s` specifies the plaintext / ciphertext
 * block length; that is, each plaintext / ciphertext block is `s` bits long.
 *
 * ⚠️ Warning ⚠️: To ensure confidentiality, CFB mode requires that the
 * initialization vector (IV) must be "unpredictable". This specification does
 * not verify IV generation; implementors must manually verify that their IVs
 * are chosen appropriately.
 *
 * For guidelines on generating IVs, see Appendix C of [NIST-SP-800-38A].
 * For information on the importance of protecting IV integrity, see Appendix D
 * of [NIST-SP-800-38A].
 *
 * @copyright Galois, Inc.
 * @author Ajay Kumar Eeralla
 * @author Alex J. Malozemoff <amaloz@galois.com>
 * www.cryptol.net
 *
 * Sources:
 * [NIST-SP-800-38A]: Morris Dworkin. Recommendation for Block Cipher
 *     Modes of Operation: Methods and Techniques. NIST Special Publication
 *     800-38A. December 2001.
 *     @see https://doi.org/10.6028/NIST.SP.800-38A
 */

module Primitive::Symmetric::Cipher::Block::Modes::CFB where
import interface Primitive::Symmetric::Cipher::Block::CipherInterface as C

/**
 * CFB encryption: [NIST-SP-800-38A] Section 6.3.
 *
 * Parameters: key, initialization vector, plaintext
 *
 * NIST Specification (Section 6.3):
 *
 *   I_1 = IV;
 *   I_j = LSB_{b-s}(I_{j-1}) | C_{j-1}  for j = 2 ... n;
 *   O_j = CIPH_K(I_j)                   for j = 1 ... n;
 *   C_j = P_j ⊕ MSB_s(O_j)             for j = 1 ... n.
 *
 * ⚠️ Warning ⚠️: To ensure confidentiality, CFB mode requires that the
 * initialization vector (IV) must be "unpredictable". This specification does
 * not verify IV generation; implementors must manually verify that their IVs
 * are chosen appropriately.
 */
encrypt : {s, n} (fin s, fin n, s >= 0, s <= C::BlockSize)
    => [C::KeySize] -> [C::BlockSize] -> [n][s] -> [n][s]
encrypt K IV Ps = Cs
    where
        CIPH_K = C::encrypt K
        Is = [ (drop`{s} I_j_1) # C_j_1
             | I_j_1 <- [IV] # Is
             | C_j_1 <- Cs
             ]
        Cs = [ P_j ^ (take`{s} (CIPH_K I_j))
             | P_j <- Ps
             | I_j <- [IV] # Is
             ]

/**
 * CFB decryption: [NIST-SP-800-38A] Section 6.3.
 *
 * Parameters: key, initialization vector, ciphertext
 *
 * NIST Specification (Section 6.3):
 *
 *  I_1 = IV;
 *  I_j = LSB_{b-s}(I_{j-1}) | C_{j-1}  for j = 2 ... n;
 *  O_j = CIPH_K(I_j)                   for j = 1 ... n;
 *  P_j = C_j ⊕ MSB_s(O_j)             for j = 1 ... n.
 *
 * ⚠️ Warning ⚠️: To ensure confidentiality, CFB mode requires that the
 * initialization vector (IV) must be "unpredictable". This specification does
 * not verify IV generation; implementors must manually verify that their IVs
 * are chosen appropriately.
 */
decrypt : {s, n} (fin s, fin n, s >= 0, s <= C::BlockSize)
    => [C::KeySize] -> [C::BlockSize] -> [n][s] -> [n][s]
decrypt K IV Cs = Ps
    where
        CIPH_K = C::encrypt K
        Is = [ (drop`{s} I_j_1) # C_j_1
             | I_j_1 <- [IV] # Is
             | C_j_1 <- Cs
             ]
        Ps = [ C_j ^ (take`{s} (CIPH_K I_j))
             | C_j <- Cs
             | I_j <- [IV] # Is
             ]

/**
 * Decryption must be the inverse of encryption.
 * With high probability, this will be incredibly slow to prove.
 * ```repl
 * :check encryptCorrect`{s=1, n=5}
 * :check encryptCorrect`{s=8, n=5}
 * :check encryptCorrect`{s=128, n=5}
 * ```
 */
encryptCorrect : {s, n} (fin n, s >= 0, s <= C::BlockSize)
    => [C::KeySize] -> [C::BlockSize] -> [n][s] -> Bool
property encryptCorrect K IV Ps = (decrypt K IV (encrypt K IV Ps)) == Ps
