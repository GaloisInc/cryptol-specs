/**
 * Advanced Encryption Standard (AES) Key Wrap with Padding Algorithm.
 *
 * This is an implementation of the Key Wrap and Key Unwrap algorithms in
 * [RFC-5649].
 *
 * Reference:
 * [RFC-5649]: R. Housley, M. Dworkin. Advanced Encryption Standard (AES) Key
 *     Wrap with Padding Algorithm. Internet Request for Comments (RFC) 5649.
 *     August 2009.
 *     @see https://datatracker.ietf.org/doc/rfc5649
 *
 * @copyright Galois Inc.
 * @author Brett Boston
 * @author Ryan Scott <rscott@galois.com>
 * @author Marcella Hastings <marcella@galois.com>
 * @author Alex J Malozemoff <amaloz@galois.com>
 *  www.cryptol.net
 */
module Primitive::Symmetric::Cipher::Block::Modes::AESKeyWrapPadded where

/*
 * While this algorithm is only valid when instantiated with AES, we use the
 * generic block cipher interface to avoid reinstantiating AES.
 */
import interface Primitive::Symmetric::Cipher::Block::CipherInterface as C
interface constraint (C::KeySize >= 64)
interface constraint (C::BlockSize == 128)

import interface Primitive::Symmetric::Cipher::Block::Modes::AESKeyWrapInterface as W
interface constraint (W::KeySize == C::KeySize)

/**
 * The key size (in bits).
 *
 * [RFC-5649] Section 1.
 */
type KeySize = C::KeySize

private
  /**
  * Alternative Initial Value (AIV) constant.
  *
  * The constant is 0xA65959A6 and occupies the high-order half of the AIV.
  *
  * [RFC-5649] Section 3.
  */
  AIVConstant : [32]
  AIVConstant = 0xA65959A6

  /**
  * Alternative Initial Value (AIV).
  *
  * The Alternative Initial Value (AIV) required by this specification is a
  * 32-bit constant concatenated to a 32-bit Message Length Indicator (MLI).  The
  * constant is 0xA65959A6 and occupies the high-order half of the AIV.  The
  * 32-bit MLI, which occupies the low-order half of the AIV, is an unsigned
  * binary integer equal to the octet length of the plaintext key data, in
  * network order -- that is, with the most significant octet first.
  *
  * [RFC-5649] Section 3.
  */
  AIV : {n} (fin n, width n <= 32) => [64]
  AIV = AIVConstant # (`n : [32])

  checkAIV : {n, m} (fin n, fin m, width n <= 32, width m <= 32) => [64] -> [m][8] -> Bit
  checkAIV A P = check1 && check2 && check3 where
    aivConstant = take`{32} A
    MLI = drop`{32} A
    // 1) Check that `MSB(32, A) = 0xA65959A6`.
    check1 = aivConstant == AIVConstant
    // 2) Check that `8 * (n - 1) < MLI <= 8 * n`.
    check2 = (8 * (`n - 1) < MLI) && (MLI <= 8 * `n)
    // 3) Let `b = (8 * n) - MLI`, and then check that the rightmost `b` octets of
    //    the output data are zero.
    check3 = and [(i < MLI) || (x == zero) | x <- P | i <- [0...]]

/**
 * Extended Key Wrapping Process.
 *
 * [RFC-5649] Section 4.1.
 */
extendedKeyWrap : {m, n} (
    fin m,
    // The plaintext consists of between one and 2^^32 octets.
    m >= 1 , m <= 2^^32, width m <= 32,
    n == m /^ 8
  ) => [m][8] -> [C::KeySize] -> [n + 1][64]
extendedKeyWrap plaintext key
  // If the padded plaintext contains exactly eight octets, then prepend the
  // AIV to P[1] and encrypt the resulting 128-bit block using AES in ECB mode
  // with key K (the KEK).
  //
  // `n == 1` implies that `m /^ 8 == 1`, but we need to add this latter
  // constraint explicitly to satisfy the Cryptol type-checker.
  | (n == 1, m /^ 8 == 1) =>
    split (C::encrypt key (join ([AIV`{m}] # P)))
    where
      P = padPlaintext`{m} plaintext

  // Otherwise, apply the wrapping process specified in Section 2.2.1 of
  // [RFC-3394] to the padded plaintext {P[1], ..., P[n]} with K (the KEK) and
  // the AIV as the initial value.  The result is n+1 64-bit blocks {C[0], C[1],
  // ..., C[n]}.
  | n > 1 =>
    W::keyWrap P key AIV`{m}
    where
      P = padPlaintext`{m} plaintext

private
  /**
   * Pad a plaintext out to the nearest 8 bytes, and return as 64-bit blocks.
   */
  padPlaintext : {m, r} (
      fin m,
      m >= 1, m <= 2^^32,
      r == m /^ 8
    ) => [m][8] -> [r][64]
  padPlaintext p = split (join p # zero)

/**
 * Extended Key Unwrapping Process.
 *
 * ⚠️ Note ⚠️: This differs from the spec in that we output the message length
 * indicator (MLI) alongside the _padded_ plaintext. It is up to the caller of
 * this function to remove the padding themselves! This is done this way because
 * the MLI as returned by the AES Key Unwrap is a _value_, but we need it as a
 * _type_ in Cryptol in order to strip the padding.
 *
 * [RFC-5649] Section 4.2.
 */
extendedKeyUnwrap : {n} (
    fin n,
    // The minimal ciphertext length is two 64-bit blocks.
    n >= 1,
    // The maximal ciphertext length must fit in 64-bits due
    // to our use of AES Key Unwrap under-the-hood.
    width n <= 64,
    // We feed `n * 8` into the `checkAIV` function, and hence
    // we need that `width (n * 8) <= 32`.
    width (n * 8) <= 32
  ) => [n + 1][64] -> [C::KeySize] -> Option ([4][8], [n * 8][8])
extendedKeyUnwrap ciphertext key =
  if valid
  then Some (size, P)
  else None
  where
    S = extendedKeyUnwrapUnchecked ciphertext key
    // Break the plaintext into the most significant 4 bytes of the AIV, the
    // least significant 4 bytes of the AIV (which corresponds to the size of
    // the plaintext without padding), and the plaintext with padding.
    aivConstant : [4][8]
    size : [4][8]
    P : [n * 8][8]
    aivConstant # size # P = S
    valid = checkAIV`{n} (join (aivConstant # size)) P

private
  /**
   * Extended Key Unwrap without checking the validity of the IV.
   */
  extendedKeyUnwrapUnchecked : {n} (
      fin n,
      // The minimal ciphertext length is two 64-bit blocks.
      n >= 1,
      // The maximal ciphertext length must fit in 64-bits due
      // to our use of AES Key Unwrap under-the-hood.
      width n <= 64
    ) => [n + 1][64] -> [C::KeySize] -> [(n + 1) * 8][8]
  extendedKeyUnwrapUnchecked ciphertext key
    // When `n = 1`, the ciphertext contains exactly two 64-bit blocks, and
    // they are decrypted as a single AES block using AES in ECB mode with `K`
    // (the KEK) to recover the AIV and the padded plaintext key.
    | n == 1 => split (C::decrypt key (join ciphertext))

    // Otherwise, apply Steps 1 and 2 of the AES Key Unwrap process to the
    // `n+1` 64-bit ciphertext blocks, `{C[0], C[1], ..., C[n]}`, and to the
    // KEK, `K`.  Define the padded plaintext blocks, `R' = {P[1], ...,
    // P[n]}`, as specified in Step 3 of that process, with `A[0]` as the `A`
    // value.  Note that checking "If `A[0]` is an appropriate value" is
    // slightly delayed to Step 2 below since the padded plaintext is needed
    // to perform this verification when the AIV is used.
    | n > 1 => split (join ([A'] # R')) where
      (A', R') = W::keyUnwrapUnchecked ciphertext key
import Common::OptionUtils(optTest)

/**
 * Extended key unwrap must be the inverse of extended key wrap.
 *
 * ```repl
 * :check extendedKeyWrapInverts`{m=9}
 * ```
 */
extendedKeyWrapInverts : {m, n} (
    fin m,
    m >= 8, m <= 2^^32, width m <= 32,
    n == m /^ 8,
    width n <= 64,
    width (n * 8) <= 32
  ) => [m][8] -> [C::KeySize] -> Bool
property extendedKeyWrapInverts plaintext key =
  optTest (\result -> result.1 == plaintext # zero) plaintext_ where
    ciphertext = extendedKeyWrap`{m} plaintext key
    plaintext_ = extendedKeyUnwrap`{n} ciphertext key
