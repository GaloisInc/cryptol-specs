/**
 * Test vectors for HMAC-SHA-256, HMAC-SHA-384, and HMAC-SHA-512, found in
 * [RFC-4868], Section 2.7.
 *
 * @copyright Galois, Inc
 * @author Eric Mertens <emertens@galois.com>
 *
 * Sources:
 *
 * [RFC-4868] S. Kelly, S. Frankel. Using HMAC-SHA-256, HMAC-SHA-384, and
 *     HMAC-SHA-512 with IPsec. Request for Comments: 4868. May 2007.
 *     @see https://datatracker.ietf.org/doc/html/rfc4868
 */
module Primitive::Symmetric::MAC::HMAC::Tests::HMAC_SHA2_512 where

import Primitive::Symmetric::MAC::HMAC::Instantiations::HMAC_SHA512 as H512

type PrfParams K D =
  { Key : [K][8]
  , Data: [D][8]
  , PRF_HMAC_SHA_512 : [512]
  }

prf_test : {K, D} (K < 256, D < 256) => PrfParams K D -> Bit
prf_test params =
  H512::hmac params.Key params.Data == split params.PRF_HMAC_SHA_512

/**
 * ```repl
 * :check rfc_4868_2_7_1_1
 * ```
 */
property rfc_4868_2_7_1_1 = prf_test
  { Key = repeat`{20} 0x0b
  , Data = "Hi There"
  , PRF_HMAC_SHA_512 =
      0x87aa7cdea5ef619d4ff0b4241a1d6cb0 #
      0x2379f4e2ce4ec2787ad0b30545e17cde #
      0xdaa833b7d6b8a702038b274eaea3f4e4 #
      0xbe9d914eeb61f1702e696c203a126854
  }

/**
 * ```repl
 * :check rfc_4868_2_7_1_2
 * ```
 */
property rfc_4868_2_7_1_2 = prf_test
  { Key = "Jefe"
  , Data = "what do ya want for nothing?"
  , PRF_HMAC_SHA_512 =
      0x164b7a7bfcf819e2e395fbe73b56e0a3 #
      0x87bd64222e831fd610270cd7ea250554 #
      0x9758bf75c05a994a6d034f65f8f0e6fd #
      0xcaeab1a34d4a6b4b636e070a38bce737
  }

/**
 * ```repl
 * :check rfc_4868_2_7_1_3
 * ```
 */
property rfc_4868_2_7_1_3 = prf_test
  { Key = repeat`{20} 0xaa
  , Data = repeat`{50} 0xdd
  , PRF_HMAC_SHA_512 =
      0xfa73b0089d56a284efb0f0756c890be9 #
      0xb1b5dbdd8ee81a3655f83e33b2279d39 #
      0xbf3e848279a722c806b485a47e67c807 #
      0xb946a337bee8942674278859e13292fb
  }

/**
 * ```repl
 * :check rfc_4868_2_7_1_4
 * ```
 */
property rfc_4868_2_7_1_4 = prf_test
  { Key = split 0x0102030405060708090a0b0c0d0e0f10111213141516171819
  , Data = repeat`{50} 0xcd
  , PRF_HMAC_SHA_512 =
      0xb0ba465637458c6990e5a8c5f61d4af7 #
      0xe576d97ff94b872de76f8050361ee3db #
      0xa91ca5c11aa25eb4d679275cc5788063 #
      0xa5f19741120c4f2de2adebeb10a298dd
  }

/**
 * ```repl
 * :check rfc_4868_2_7_1_5
 * ```
 */
property rfc_4868_2_7_1_5 = prf_test
  { Key = repeat`{131} 0xaa
  , Data = "Test Using Larger Than Block-Size Key - Hash Key First"
  , PRF_HMAC_SHA_512 =
      0x80b24263c7c1a3ebb71493c1dd7be8b4 #
      0x9b46d1f41b4aeec1121b013783f8f352 #
      0x6b56d037e05f2598bd0fd2215d6a1e52 #
      0x95e64f73f63f0aec8b915a985d786598
  }

/**
 * ```repl
 * :check rfc_4868_2_7_1_6
 * ```
 */
property rfc_4868_2_7_1_6 = prf_test
  { Key = repeat`{131} 0xaa
  , Data = "This is a test using a larger than block-size key and a larger than block-size data. The key needs to be hashed before being used by the HMAC algorithm."
  , PRF_HMAC_SHA_512 =
      0xe37b6a775dc87dbaa4dfa9f96e5e3ffd #
      0xdebd71f8867289865df5a32d20cdc944 #
      0xb6022cac3c4982b10d5eeb55c3e4de15 #
      0x134676fb6de0446065c97440fa8c6a58
  }

type AuthTest512 T =
  { Key : [64][8]
  , Data : [T][8]
  , PRF_HMAC_SHA_512 : [512]
  , HMAC_SHA_512_256 : [256]
  }

sha2_512_auth_test : {T} (T < 256) => AuthTest512 T -> Bit
sha2_512_auth_test params =
  H512::hmac params.Key params.Data == split params.PRF_HMAC_SHA_512 /\
  H512::hmac_truncate params.Key params.Data == split params.HMAC_SHA_512_256

/**
 * ```repl
 * :check rfc_4868_2_7_2_3_1
 * ```
 */
property rfc_4868_2_7_2_3_1 = sha2_512_auth_test
  { Key = repeat`{64} 0x0b
  , Data = "Hi There"
  , PRF_HMAC_SHA_512 =
      0x637edc6e01dce7e6742a99451aae82df #
      0x23da3e92439e590e43e761b33e910fb8 #
      0xac2878ebd5803f6f0b61dbce5e251ff8 #
      0x789a4722c1be65aea45fd464e89f8f5b
  , HMAC_SHA_512_256 =
      0x637edc6e01dce7e6742a99451aae82df #
      0x23da3e92439e590e43e761b33e910fb8
  }

/**
 * ```repl
 * :check rfc_4868_2_7_2_3_2
 * ```
 */
property rfc_4868_2_7_2_3_2 = sha2_512_auth_test
  { Key = "JefeJefeJefeJefeJefeJefeJefeJefeJefeJefeJefeJefeJefeJefeJefeJefe"
  , Data = "what do ya want for nothing?"
  , PRF_HMAC_SHA_512 =
      0xcb370917ae8a7ce28cfd1d8f4705d614 #
      0x1c173b2a9362c15df235dfb251b15454 #
      0x6aa334ae9fb9afc2184932d8695e397b #
      0xfa0ffb93466cfcceaae38c833b7dba38
  , HMAC_SHA_512_256 =
      0xcb370917ae8a7ce28cfd1d8f4705d614 #
      0x1c173b2a9362c15df235dfb251b15454
  }

/**
 * ```repl
 * :check rfc_4868_2_7_2_3_3
 * ```
 */
property rfc_4868_2_7_2_3_3 = sha2_512_auth_test
  { Key = repeat`{64} 0xaa
  , Data = repeat`{50} 0xdd
  , PRF_HMAC_SHA_512 =
      0x2ee7acd783624ca9398710f3ee05ae41 #
      0xb9f9b0510c87e49e586cc9bf961733d8 #
      0x623c7b55cebefccf02d5581acc1c9d5f #
      0xb1ff68a1de45509fbe4da9a433922655
  , HMAC_SHA_512_256 =
      0x2ee7acd783624ca9398710f3ee05ae41 #
      0xb9f9b0510c87e49e586cc9bf961733d8
  }

/**
 * ```repl
 * :check rfc_4868_2_7_2_3_4
 * ```
 */
property rfc_4868_2_7_2_3_4 = sha2_512_auth_test
  { Key =
      // Corrected example from RFC
      split 0x0102030405060708090a0b0c0d0e0f10 #
      split 0x1112131415161718191a1b1c1d1e1f20 #
      split 0x2122232425262728292a2b2c2d2e2f30 #
      split 0x3132333435363738393a3b3c3d3e3f40
  , Data = repeat`{50} 0xcd
  , PRF_HMAC_SHA_512 =
      0x5e6688e5a3daec826ca32eaea224eff5 #
      0xe700628947470e13ad01302561bab108 #
      0xb8c48cbc6b807dcfbd850521a685babc #
      0x7eae4a2a2e660dc0e86b931d65503fd2
  , HMAC_SHA_512_256 =
      0x5e6688e5a3daec826ca32eaea224eff5 #
      0xe700628947470e13ad01302561bab108
  }
