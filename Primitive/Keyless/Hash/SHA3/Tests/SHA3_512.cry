/**
 * Tests of the SHA3_512 hash function.
 *
 * Test vectors drawn from the NIST Cryptographic Algorithm Validation Program.
 * This program includes test vectors that can be used to spot-check an
 * implementation. It includes tests for bitwise inputs (where the input length
 * is any nonnegative integer) and for bytewise inputs (where the input length
 * is a multiple of 8).
 * @see CAVP. https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/secure-hashing#sha3vsha3vss
 * @see SHA3 bitwise test vectors. https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/documents/sha3/sha-3bittestvectors.zip
 * @see SHA3 bytewise test vectors. https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/documents/sha3/sha-3bytetestvectors.zip
 *
 * Some of the bitwise tests in this file use the `KOP::truncate` function. The
 * CAVP vectors use the format described in [FIPS-202] Appendix B, where inputs
 * to SHA3 are provided as hex strings with an even number of digits and a
 * length parameter. The `h2b` function for processing such inputs has an
 * implicit truncation step. We've written the SHA3 spec to take arbitrary bit
 * vectors, but this assumes that the length of the input is its actual length.
 * The `truncate` function is written to support the even-hex-digit format and
 * must be called on an input before passing it to SHA3.
 *
 * @copyright Galois Inc.
 * @author Ajay Kumar Eeralla
 * @editor Iavor Diatchki <diatchki@galois.com>
 * @author Marcella Hastings <marcella@galois.com>
 */
module Primitive::Keyless::Hash::SHA3::Tests::SHA3 where

import Primitive::Keyless::Hash::SHA3::KeccakBitOrdering as KBO


import Primitive::Keyless::Hash::SHA3::Instantiations::SHA3_512 as SHA3_512

/**
 * This is from the bitwise tests.
 * ```repl
 * :prove t1
 * ```
 */
property t1 = SHA3_512::hash [] == output where
    output = join [
        0xa69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a6,
        0x15b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26
    ]

/**
 * This is from the bytewise tests.
 * ```repl
 * :prove t72
 * ```
 */
property t72 = hashWorks && hashBytesWorks where
    hashWorks = SHA3_512::hash input == output
    hashBytesWorks = SHA3_512::hashBytes (split input) == split output
    input = 0x3d6093966950abd846
    output = join [
        0x53e30da8b74ae76abf1f65761653ebfbe87882e9ea0ea564addd7cfd5a652457,
        0x8ad6be014d7799799ef5e15c679582b791159add823b95c91e26de62dcb74cfa
    ]

/**
 * This is from the bitwise tests.
 * ```repl
 * :prove t100
 * ```
 */
property t100 = SHA3_512::hash input == output where
    input = KBO::truncate`{100} 0xd404d8e31f8091709122025a0c
    output = join [
        0xa5ce9e2523788040eab94f0a2467efc2a1e6d4ea74e9248f97f94ce1407f0c88,
        0x2e6b0578d98a7067d98c79b2b1dd2cb76393e6356061146637e5240d34ed6955
    ]
