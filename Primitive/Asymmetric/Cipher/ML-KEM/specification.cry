/*
ML-KEM cipher with a fast NTT implementation.

@copyright Galois, Inc
@author Marios Georgiou <marios@galois.com>

@copyright Amazon.com or its affiliates.
@author Rod Chapman <rodchap@amazon.com>
*/
module specification where

type q = 3329

type Byte = [8]

BytesToBits : {ell} (fin ell, ell > 0) => [ell]Byte -> [ell*8]Bit
BytesToBits input = join (map reverse input)

// The following helper functions are also used.
BitsToBytes : {ell} (fin ell, ell > 0) => [ell*8]Bit -> [ell]Byte
BitsToBytes input = map reverse (groupBy input)

BitToZ : {p} (fin p, p > 1) => Bit -> Z p
BitToZ b = if b then 1 else 0

BitstoZ : {ell} (fin ell, ell > 0) => [ell] -> (Z q)
BitstoZ betas = fromInteger (toInteger (reverse betas))

ZtoBits : {ell} (fin ell, ell > 0) => (Z q) -> [ell]
ZtoBits fi = reverse (fromInteger (fromZ fi))

plus : {x, y} (fin x) => [x+y]Byte -> [y]Byte
plus = drop

// Cryptol's built-in operator for concatenation is #
concatPlus : {x, y} (fin x, fin y) => [x]Byte -> [y]Byte -> [y]Byte
concatPlus a b = plus`{x} (a#b)

concatPlusCorrect : {x, y} (fin y, fin x) => [x]Byte -> [y]Byte -> Bit
property concatPlusCorrect a b = concatPlus a b == b



type n = 256

// Z is a Cryptol primitive such that Z q represents integers mod q that are
// closed under arithmetic operations
type Z_q_256 = [n](Z q)



modpm : {alpha} (fin alpha, alpha > 0) => Z alpha -> Integer
modpm r = if r' > (`alpha / 2) then r' - `alpha else r'
  where r' = fromZ(r)



// In Cryptol, rounding is computed via the built-in function roundAway
property rounding = ((roundAway(1.5) == 2) && (roundAway(1.4) == 1))



// Cryptol does not support sampling. Therefore, for every algorithm, we denote
// its randomness as an explicit input value.



// Since q is fixed but d varies, we parameterize by d instead of by q.
Compress'' : {d} (d < lg2 q) => Z q -> [d]
Compress'' x = fromInteger(roundAway(((2^^`d)/.`q) * fromInteger(fromZ(x))) % 2^^`d)

Decompress'' : {d} (d < lg2 q) => [d] -> Z q
Decompress'' x = fromInteger(roundAway(((`q)/.(2^^`d))*fromInteger(toInteger(x))))

B_q : {d} (d < lg2 q) => Integer
B_q = roundAway((`q/.(2^^(`d+1))))

CorrectnessCompress : Z q -> Bit
property CorrectnessCompress x = err <= B_q`{d_u} where
  x' = Decompress''`{d_u}(Compress''`{d_u}(x))
  err = abs(modpm(x'-x))



Compress' : {d} (d < lg2 q) => Z_q_256 -> [n][d]
Compress' x = map Compress''`{d} x

Decompress' : {d} (d < lg2 q) => [n][d] -> Z_q_256
Decompress' x = map Decompress''`{d} x

Compress : {d, k1} (d < lg2 q, fin k1) => [k1]Z_q_256 -> [k1][n][d]
Compress x = map Compress'`{d} x

Decompress : {d, k1} (d < lg2 q, fin k1) => [k1][n][d] -> [k1]Z_q_256
Decompress x = map Decompress'`{d} x



// These types distinguish infinite from finite length
PRF : {prfeta} (fin prfeta, prfeta > 0) => ([32]Byte, Byte) -> [64 * prfeta]Byte
XOF : ([32]Byte, Byte, Byte) -> [inf]Byte
H : {hinl} (fin hinl) => [hinl]Byte -> [32]Byte
J : {hinl} (fin hinl) => [hinl]Byte -> [32]Byte
G : {ginl} (fin ginl) => [ginl]Byte -> ([32]Byte, [32]Byte)
KDF : {kdfinl} (fin kdfinl, kdfinl > 0) => [kdfinl]Byte -> [inf]Byte



zeta = 17 : Z q

QMinusOne : Bit
property QMinusOne = `q - 1 == 2^^8*13

Is256thRootOfq : [lg2 q] -> Bit
property Is256thRootOfq p = (p == 0) || (p >= 256) || (zeta^^p != 1)

BitRev7 : [8] -> [8]
BitRev7 = reverse


//////////////////////////////////////////////////////////////
// This section specifies a naive O(N**2) NTT and Inverse NTT
//
// A "fast" O(N log N) version is below, followed by a
// proof of their equivalence
//////////////////////////////////////////////////////////////

ParametricNTT : Z_q_256 -> (Z q) -> Z_q_256
ParametricNTT f root = join[[f2i i, f2iPlus1 i] | i <- [0 .. 127]]
  where f2i i      = sum [f@(2*j)   * root ^^ ((2*(BitRev7 i >> 1)+1)*j) | j <- [0 .. 127]]
        f2iPlus1 i = sum [f@(2*j+1) * root ^^ ((2*(BitRev7 i >> 1)+1)*j) | j <- [0 .. 127]]

ParametricNTTInv : Z_q_256 -> (Z q) -> Z_q_256
ParametricNTTInv f root = join[[f2i i, f2iPlus1 i] | i <- [0 .. 127]]
  where f2i i      = sum [f@(2*j)   * root ^^ ((2*(BitRev7 j >> 1)+1)*i) | j <- [0 .. 127]]
        f2iPlus1 i = sum [f@(2*j+1) * root ^^ ((2*(BitRev7 j >> 1)+1)*i) | j <- [0 .. 127]]

NaiveNTT : Z_q_256 -> Z_q_256
NaiveNTT f = ParametricNTT f zeta

NaiveNTTInv : Z_q_256 -> Z_q_256
NaiveNTTInv f = [term*(recip 128) | term <- ParametricNTTInv f (recip zeta)]

//////////////////////////////////////////////////////////////
// This section specifies fast O(N log N) NTT and Inverse NTT
//
// A readable explanation of the derivation of this form of
// the NTT is in "A Complete Beginner Guide to the Number
// Theoretic Transform (NTT)" by Ardianto Satriawan,
// Rella Mareta, and Hanho Lee. Available from:
//    https://eprint.iacr.org/2024/585
//
// This section Copyright Amazon.com, Inc. or its affiliates.
//////////////////////////////////////////////////////////////

// Simple lookup table for Zeta value given K
zeta_expc  : [128](Z q)
zeta_expc = [ 1, 1729, 2580, 3289, 2642, 630, 1897, 848,
              1062, 1919, 193, 797, 2786, 3260, 569, 1746,
              296, 2447, 1339, 1476, 3046, 56, 2240, 1333,
              1426, 2094, 535, 2882, 2393, 2879, 1974, 821,
              289, 331, 3253, 1756, 1197, 2304, 2277, 2055,
              650, 1977, 2513, 632, 2865, 33, 1320, 1915,
              2319, 1435, 807, 452, 1438, 2868, 1534, 2402,
              2647, 2617, 1481, 648, 2474, 3110, 1227, 910,
              17, 2761, 583, 2649, 1637, 723, 2288, 1100,
              1409, 2662, 3281, 233, 756, 2156, 3015, 3050,
              1703, 1651, 2789, 1789, 1847, 952, 1461, 2687,
              939, 2308, 2437, 2388, 733, 2337, 268, 641,
              1584, 2298, 2037, 3220, 375, 2549, 2090, 1645,
              1063, 319, 2773, 757, 2099, 561, 2466, 2594,
              2804, 1092, 403, 1026, 1143, 2150, 2775, 886,
              1722, 1212, 1874, 1029, 2110, 2935, 885, 2154 ]

// Fast recursive CT-NTT
ct_butterfly :
    {m, hm}
    (m >= 2, m <= 8, hm >= 1, hm <= 7, hm == m - 1) =>
    [2^^m](Z q) -> (Z q) -> [2^^m](Z q)
ct_butterfly v z = new_v
  where
    halflen = 2^^`hm
    lower, upper : [2^^hm](Z q)
    lower@x = v@x + z * v@(x + halflen)
    upper@x = v@x - z * v@(x + halflen)
    new_v = lower # upper

fast_nttl :
    {lv}  // Length of v is a member of {256,128,64,32,16,8,4}
    (lv >= 2, lv <= 8) =>
    [2^^lv](Z q) -> [8] -> [2^^lv](Z q)
fast_nttl v k
  // Base case. lv==2 so just compute the butterfly and return
  | lv == 2 => ct_butterfly`{lv,lv-1} v (zeta_expc@k)

  // Recursive case. Butterfly what we have, then recurse on each half,
  // concatenate the results and return.
  | lv  > 2 => (fast_nttl`{lv-1} s0 (k * 2)) #
               (fast_nttl`{lv-1} s1 (k * 2 + 1))
                where
                  t = ct_butterfly`{lv,lv-1} v (zeta_expc@k)
                  // Split t into two halves s0 and s1
                  [s0, s1] = split t

// Top level entry point - start with lv=256, k=1
fast_ntt : Z_q_256 -> Z_q_256
fast_ntt v = fast_nttl v 1

// Fast recursive GS-Inverse-NTT
gs_butterfly :
    {m, hm}
    (m >= 2, m <= 8, hm >= 1, hm <= 7, hm == m - 1) =>
    [2^^m](Z q) -> (Z q) -> [2^^m](Z q)
gs_butterfly v z = new_v
  where
    halflen = 2^^`hm
    lower, upper : [2^^hm](Z q)
    lower@x = v@x  + v@(x + halflen)
    upper@x = z * (v@(x + halflen) - v@x)
    new_v = lower # upper

fast_invnttl :
    {lv}  // Length of v is a member of {256,128,64,32,16,8,4}
    (lv >= 2, lv <= 8) =>
    [2^^lv](Z q) -> [8] -> [2^^lv](Z q)

fast_invnttl v k
  // Base case. lv==2 so just compute the butterfly and return
  | lv == 2 => gs_butterfly`{lv,lv-1} v (zeta_expc@k)

  // Recursive case. Recurse on each half,
  // concatenate the results, butterfly that, and return.
  | lv  > 2 => gs_butterfly`{lv,lv-1} t (zeta_expc@k)
                where
                  // Split t into two halves s0 and s1
                  [s0, s1] = split v
                  t = (fast_invnttl`{lv-1} s0 (k * 2 + 1)) #
                      (fast_invnttl`{lv-1} s1 (k * 2))

// Multiply all elements of v by the reciprocal of 128 (modulo q)
recip_128_modq = (recip 128) : (Z q)
mul_recip128 : Z_q_256 -> Z_q_256
mul_recip128 v = [ v@x * recip_128_modq | x <- [0 .. <n] ]

// Top level entry point - start with lv=256, k=1
fast_invntt : Z_q_256 -> Z_q_256
fast_invntt v = mul_recip128 (fast_invnttl v 1)

//////////////////////////////////////////////////////////////
// Properties and proofs of Naive and Fast NTT
//////////////////////////////////////////////////////////////

/**
 * This property demonstrates that NaiveNTT is self-inverting
 * ```
 * :prove NaiveNTT_Inverts
 * ```
 */
NaiveNTT_Inverts : Z_q_256 -> Bit
property NaiveNTT_Inverts f =  NaiveNTTInv (NaiveNTT f) == f

/**
 * This property demonstrates that NaiveNTTInv is self-inverting
 * ```
 * :prove NaiveNTTInv_Inverts
 * ```
 */
NaiveNTTInv_Inverts : Z_q_256 -> Bit
property NaiveNTTInv_Inverts f =  NaiveNTT (NaiveNTTInv f) == f

/**
 * This property demonstrates that `fast_ntt` is the inverse of `fast_invntt`.
 * ```
 * :prove fast_ntt_inverts
 * ```
 */
fast_ntt_inverts    : Z_q_256 -> Bit
property fast_ntt_inverts    f =  fast_invntt (fast_ntt f)    == f

/**
 * This property demonstrates that `fast_invntt` is the inverse of `fast_ntt`.
 * ```
 * :prove fast_invntt_inverts
 * ```
 */
fast_invntt_inverts : Z_q_256 -> Bit
property fast_invntt_inverts f =  fast_ntt    (fast_invntt f) == f

/**
 * This property demonstrates that `naive_ntt` is equivalent to `fast_ntt`.
 * ```
 * :prove naive_fast_ntt_equiv
 * ```
 */
naive_fast_ntt_equiv : Z_q_256 -> Bit
property naive_fast_ntt_equiv f =  NaiveNTT f == fast_ntt f

/**
 * This property demonstrates that `naive_invntt` is equivalent to `fast_invntt`.
 * ```
 * :prove naive_fast_invntt_equiv
 * ```
 */
naive_fast_invntt_equiv : Z_q_256 -> Bit
property naive_fast_invntt_equiv f =  NaiveNTTInv f == fast_invntt f

//////////////////////////////////////////////////////////////
// NTT "dispatcher"
//
// Here, we can choose to call either the naive or fast NTT
//////////////////////////////////////////////////////////////

NTT' : Z_q_256 -> Z_q_256
// fast
NTT' f = fast_ntt f
// slow
//NTT' f = NaiveNTT f

NTTInv' : Z_q_256 -> Z_q_256
// fast
NTTInv' f = fast_invntt f
// slow
//NTTInv' f = NaiveNTTInv f

//////////////////////////////////////////////////////////////
// Polynomial multiplication in the NTT domain
//////////////////////////////////////////////////////////////

BaseCaseMultiply : [2] (Z q) -> [2] (Z q) -> (Z q) -> [2] (Z q)
BaseCaseMultiply a b root = [r0, r1]
  where
    r0 = a@1 * b@1 * root + a@0 * b@0
    r1 = a@0 * b@1 + a@1 * b@0

MultiplyNTTs : Z_q_256 -> Z_q_256 -> Z_q_256
MultiplyNTTs a b = join [BaseCaseMultiply (poly1 i) (poly2 i) (root i) | i : Byte <- [0 .. 127]]
  where
    poly1 i = [a@(2*i),a@(2*i+1)]
    poly2 i = [b@(2*i),b@(2*i+1)]
    root i = (zeta^^(reverse (64 + (i >> 1)) >> 1) * ((-1 : (Z q)) ^^ (i)))

prod : Z_q_256 -> Z_q_256 -> Z_q_256
prod f g = NTTInv' (MultiplyNTTs (NTT' f) (NTT' g))

// Testing that (1+x)^2 = 1+2x+x^2
TestMult : Bit
property TestMult = prod f f == fsq where
  f = [1, 1] # [0 | i <- [3 .. 256]]
  fsq = [1,2,1] # [0 | i <- [4 .. 256]]

dot : Z_q_256 -> Z_q_256 -> Z_q_256
dot f g = MultiplyNTTs f  g

add : Z_q_256 -> Z_q_256 -> Z_q_256
add f g = f + g



NTT v = map NTT' v
NTTInv v = map NTTInv' v



dotVecVec : {k1} (fin k1) => [k1]Z_q_256 -> [k1]Z_q_256 -> Z_q_256
dotVecVec v1 v2 = foldl add zero (zipWith dot v1 v2)

dotMatVec : {k1,k2} (fin k1, fin k2) => [k1][k2]Z_q_256 -> [k2]Z_q_256 -> [k1]Z_q_256
dotMatVec matrix vector = [dotVecVec v1 vector | v1 <- matrix]

dotMatMat :{k1,k2,k3} (fin k1, fin k2, fin k3) =>
  [k1][k2]Z_q_256 -> [k2][k3]Z_q_256 -> [k1][k3]Z_q_256
dotMatMat matrix1 matrix2 = transpose [dotMatVec matrix1 vector | vector <- m']
    where m' = transpose matrix2



// Since Cryptol does not natively support while loops, we approach this
// potentially infinite loop with recursion. We define SampleNTTInf that
// converts an infinite sequence of bytes to an infinite sequence of
// elements in Z q. We then pick the first n elements for the result.

SampleNTT : [inf]Byte -> Z_q_256
SampleNTT b = take elements
    where elements = SampleNTTInf b

// SampleNTTInf implements a filter. It scans the input 3 by 3, calculates
// the elements d1 and d2 and finally returns the elements that satisfy
// the conditions together with the result of itself when applied to the
// tail.

SampleNTTInf: [inf]Byte -> [inf](Z q)
SampleNTTInf ([bi,bi1,bi2] # tailS) =
    if d1 < `q then
        if d2 < `q then
            [fromInteger(d1),fromInteger(d2)] # SampleNTTInf tailS
        else
            [fromInteger(d1)] # SampleNTTInf tailS
    else
        if d2 < `q then
            [fromInteger(d2)] # SampleNTTInf tailS
        else
            SampleNTTInf tailS
    where
        d1 = toInteger(reverse bi) + 256 * (toInteger(reverse bi1) % 16)
        d2 = floor(ratio (toInteger(reverse bi1)) 16) + 16 * toInteger(reverse bi2)



SamplePolyCBD: {eta} (fin eta, eta > 0) => [64 * eta]Byte -> Z_q_256
SamplePolyCBD B = [f i | i <- [0 .. 255]]
    where betas = BytesToBits B : [512 * eta]
          x i = sum [BitToZ`{q} (betas@(2*i*`eta+j)) | j <- [0 .. (eta-1)]]
          y i = sum [BitToZ`{q} (betas@(2*i*`eta+`eta+j)) | j <- [0 .. (eta-1)]]
          f i = (x i) - (y i)



// We make this trivial serialization explicit, since it is not an identity in Cryptol.
// Byte encoding and decoding involves regrouping 8-bit arrays into ell-bit arrays.
regroup B = reverse (groupBy (join (reverse B)))

EncodeBytes' : {ell, c} (fin ell, ell > 0, fin c) => [c * 8][ell] -> [c * ell]Byte
EncodeBytes' = regroup

DecodeBytes' : {ell, c} (fin ell, ell > 0, fin c) => [c * ell]Byte -> [c * 8][ell]
DecodeBytes' = regroup

CorrectnessEncodeBytes' : [n][2] -> Bit
property CorrectnessEncodeBytes' B = DecodeBytes'(EncodeBytes' B) == B

EncodeBytes : {ell, k1, c} (fin ell, ell > 0, fin k1, fin c) =>
    [k1][c * 8][ell] -> [c * ell * k1]Byte
EncodeBytes B = EncodeBytes' (join B)

DecodeBytes : {ell, k1, c} (fin ell, ell > 0, fin k1, fin c) =>
    [c * ell * k1]Byte -> [k1][c * 8][ell]
DecodeBytes B = groupBy (DecodeBytes' B)

CorrectnessEncodeBytes : [k][n][2] -> Bit
property CorrectnessEncodeBytes B = DecodeBytes(EncodeBytes B) == B



Encode : {ell, k1} (fin ell, ell > 0, fin k1) => [k1]Z_q_256 -> [32 * ell * k1]Byte
Encode fVec = join (map Encode'`{ell} fVec)

Decode : {ell, k1} (fin ell, ell > 0, fin k1) => [32 * ell * k1]Byte -> [k1]Z_q_256
Decode BVec = map Decode'`{ell} (split BVec)

CorrectnessEncodeDecode : [k]Z_q_256 -> Bit
property CorrectnessEncodeDecode fVec = all CorrectnessEncodeDecode' fVec



DecodeSpec : {ell} (fin ell, ell > 0) => [32 * ell]Byte -> Z_q_256
DecodeSpec B = [f i | i <- [0 .. 255]]
    where betas = BytesToBits B : [256 * ell]
          f i = sum [ BitToZ`{q}(betas@(i*`ell+j))*fromInteger(2^^j)
                    | j <- [0 .. (ell-1)]]

// We include a more efficient way to compute decoding
// together with a property that it is equivalent.
Decode' : {ell} (fin ell, ell > 0) => [32 * ell]Byte -> Z_q_256
Decode' B = map BitstoZ`{ell} (split (BytesToBits B))

DecodeEquiv : [32 * 12]Byte -> Bit
property DecodeEquiv B = (Decode' B == DecodeSpec B)

Encode' : {ell} (fin ell, ell > 0) => Z_q_256 -> [32 * ell]Byte
Encode' f = BitsToBytes (join (map ZtoBits`{ell} f))

CorrectnessEncodeDecode' : Z_q_256 -> Bit
property CorrectnessEncodeDecode' f = Decode'`{12}(Encode'`{12} f) == f



K_PKE_KeyGen: ([32]Byte) -> ([384*k+32]Byte, [384*k]Byte)
K_PKE_KeyGen(d) = (ekPKE, dkPKE) where
  (ρ,σ) = G(d)
  A_hat = [[SampleNTT (XOF(ρ,i,j)) | i <- [0 .. k-1]] | j <- [0 .. k-1]] : [k][k]Z_q_256
  s = [SamplePolyCBD`{eta_1}(PRF(σ,N)) | N <- [0 .. k-1]] : [k]Z_q_256
  e = [SamplePolyCBD`{eta_1}(PRF(σ,N)) | N <- [k .. (2*k-1)]] : [k]Z_q_256
  s_hat = NTT(s)
  e_hat = NTT(e)
  t_hat = (dotMatVec A_hat s_hat) + e_hat
  ekPKE = Encode`{12}(t_hat) # ρ
  dkPKE = Encode`{12}(s_hat)



K_PKE_Encrypt : ([384*k+32]Byte, [32]Byte, [32]Byte) -> [32*(d_u*k+d_v)]Byte
K_PKE_Encrypt(ekPKE, m, r) = c where
  t_hat = Decode`{12} (ekPKE@@[0 .. 384*k - 1])
  rho = ekPKE@@[384*k .. 384*k + 32 - 1]
  A_hat = [[SampleNTT (XOF(rho,i,j)) | i <- [0 .. k-1]] | j <- [0 .. k-1]] : [k][k]Z_q_256
  rvec = [SamplePolyCBD`{eta_1}(PRF(r,N)) | N <- [0 .. k-1]] : [k]Z_q_256
  e1 = [SamplePolyCBD`{eta_2}(PRF(r,N)) | N <- [k .. (2*k-1)]] : [k]Z_q_256
  e2 = SamplePolyCBD`{eta_2}(PRF(r,2*`k)) : Z_q_256
  rvechat = NTT rvec
  u = NTTInv (dotMatVec (transpose A_hat) rvechat) + e1 : [k]Z_q_256
  mu = Decompress'`{1}(DecodeBytes'`{1} m)
  v = (NTTInv' (dotVecVec t_hat rvechat)) + e2 + mu
  c1 = EncodeBytes`{d_u}(Compress`{d_u}(u))
  c2 = EncodeBytes'`{d_v}(Compress'`{d_v}(v))
  c = c1#c2



K_PKE_Decrypt : ([384*k]Byte, [32*(d_u*k+d_v)]Byte) -> [32]Byte
K_PKE_Decrypt(sk, c) = m where
  c1 = c@@[0 .. 32*d_u*k - 1]
  c2 = c@@[32*d_u*k .. 32*(d_u*k+d_v) - 1]
  u = Decompress`{d_u}(DecodeBytes`{d_u} c1)   : [k]Z_q_256
  v = Decompress'`{d_v}(DecodeBytes'`{d_v} c2) : Z_q_256
  s_hat = Decode`{12} sk : [k]Z_q_256
  w = v - NTTInv' (dotVecVec s_hat (NTT u))
  m = EncodeBytes'`{1}(Compress'`{1}(w))

// Kyber is correct with probability 1-delta and not 1. As a result,
// running :prove Correctness will not succeed since there is a
// fraction delta of seeds d,r that do not work. Therefore, we can
// only run :check Correctness. Cryptol does not currently support counting.

CorrectnessPKE : ([32]Byte, [32]Byte, [32]Byte) -> Bit
property CorrectnessPKE(d, m, r) = (m' == m) where
  (pk, sk) = K_PKE_KeyGen(d)
  c = K_PKE_Encrypt(pk, m, r)
  m' = K_PKE_Decrypt(sk, c)



// We make the randomness of K_PKE_KeyGen explicit
ML_KEM_KeyGen : ([32]Byte,[32]Byte) -> ([384*k+32]Byte, [768*k+96]Byte)
ML_KEM_KeyGen (z,d) = (ek, dk) where
  (ekPKE, dkPKE) = K_PKE_KeyGen(d)
  ek = ekPKE
  dk = dkPKE#ek#H(ek)#z



// We make the random message m explicit.
ML_KEM_Encaps : ([384*k+32]Byte, [32]Byte) -> ([32]Byte, [32*(d_u*k+d_v)]Byte)
ML_KEM_Encaps (ek, m) = (K, c) where
  (K, r) = G(m#H(ek))
  c = K_PKE_Encrypt(ek, m, r)



ML_KEM_Decaps : ([32*(d_u*k+d_v)]Byte, [768*k+96]Byte) -> [32]Byte
ML_KEM_Decaps (c, dk) = K
  where
    dkPKE = dk@@[0 .. 384*k - 1] // extract (from KEM decaps key) the PKE decryption key
    ekPKE = dk@@[384*k .. 768*k + 32 - 1] // extract PKE encryption key
    h = dk@@[768*k + 32 .. 768*k + 64 - 1] // extract hash of PKE encryption key
    z = dk@@[768*k + 64 .. 768*k + 96 - 1] // extract implicit rejection value
    m' = K_PKE_Decrypt(dkPKE, c) // decrypt ciphertext
    (K', r') = G(m'#h)
    Kbar = J(z#c) : [32]Byte // Spec has a typo
    c' = K_PKE_Encrypt(ekPKE, m', r')
    K = if (c != c') then Kbar // Suggestion to spec: Rename K' to K
                     else K'


CorrectnessKEM : ([32]Byte, [32]Byte, [32]Byte) -> Bit
property CorrectnessKEM(z, d, m) = (K == K') where
  (pk, sk) = ML_KEM_KeyGen(z, d)
  (K, c) = ML_KEM_Encaps(pk, m)
  K' = ML_KEM_Decaps(c, sk)



parameter
  type k : #
  type constraint (width k > 0, width 2*k <= 8)
  type eta_1 : #
  type constraint (fin eta_1, eta_1 > 0)
  type eta_2 : #
  type constraint (fin eta_2, eta_2 > 0)
  type d_u : #
  // both d_u and d_v must be less than lg2 q = 12
  type constraint (fin d_u, d_u < 12, d_u > 0)
  type d_v : #
  type constraint (fin d_v, d_v < 12, d_v > 0)



import Primitive::Keyless::Hash::utils
import Primitive::Keyless::Hash::SHAKE::SHAKE128
XOF(rho, i, j) = groupBy`{8}(shake128((fromBytes(rho))# reverse i# reverse j))
J(s) = take(groupBy(shake256(fromBytes(s))))

import `Primitive::Keyless::Hash::SHA3::SHA3
H M = toBytes(sha3 `{digest = 256} (fromBytes(M)))

G M = (result@0, result@1)
    where result = split`{2} (toBytes(sha3 `{digest = 512} (fromBytes(M))))

import Primitive::Keyless::Hash::SHAKE::SHAKE256
PRF(s,b) = map reverse (take (groupBy`{8} (shake256(fromBytes(s)# reverse b))))

KDF input = groupBy`{8}(shake256 (fromBytes(input)))
