/**
 * This module implements a subset of the RSA encryption, decryption, signature,
 * and signature verification primitives per their definitions in RFC 3447 (PKCS #1).
 * These primitives are all modular exponentiations over a specially constructed modulus.
 *
 * The security of the RSA cryptographic primitives are subtle. A user of this module
 * should note that conformance to RFC 3447 does not imply conformance to NIST or FIPS
 * standards concerning integer factorization cryptography. We will reference these
 * other standards when possible to illuminate the points of difference between them.
 * We will also note future intent to implement the RSA primitives tailored to these
 * standards in other modules.
 *
 * This module is less general than RFC 3447. The author's have made the pragmatic
 * decision to encode as many constraints specified by RFC 3447 in Cryptol's type system
 * as possible. As a result, we allow RSA moduli with only two prime factors; the RFC
 * allows any number of factors greater than or equal to two. The authors of this specification
 * have made this decision based on the fact that NIST and FIPS standards allow only "bi-prime"
 * RSA. Thus, the authors thought it a pragmatic middle ground between conformance to the RFC
 * and ease of clear expression in Cryptol.
 *
 * Users of this module should further note that some of the type signatures of the functions
 * in this module do not exactly correspond to the type signatures specified in the RFC. When
 * such a situation arises, an explanation will be provided in the doc comment above the function.
 *
 * References:
 *    [RFC 3447]
 *    Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1
 *    J. Jonson, B. Kaliski, RSA Laboratories; February 2003.
 *    @see https://datatracker.ietf.org/doc/html/rfc3447#page-70
 *
 * @author John Christensen <jchristensen@galois.com>
 * @copyright Galois, Inc.
 *
 */
module Primitive::Asymmetric::Cipher::RSA where
