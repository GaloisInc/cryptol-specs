/*
   This module implements the digital signature scheme Dilithium
   submitted to the NIST post-quantum project.

   See https://pq-crystals.org/dilithium/data/dilithium-specification.pdf

   Copyright (c) 2018, Galois Inc.
   www.cryptol.net
   You can freely use this source code for educational purposes.

*/

/*
This module implements the digital signature scheme Dilithium
submitted to the NIST post-quantum project.

See https://pq-crystals.org/dilithium/data/dilithium-specification.pdf
See https://csrc.nist.gov/Projects/post-quantum-cryptography/Round-1-Submissions

Copyright (c) 2018, Galois Inc.
www.cryptol.net
You can freely use this source code for educational purposes.

*/

module Primitive::Asymmetric::Signature::DilithiumBV where

import Primitive::Keyless::Hash::keccak as SHA3
import Common::utils
import Common::mod_arith
import Primitive::Asymmetric::Cipher::RSA
import Primitive::Asymmetric::Signature::testDilithium


// DilithiumII parameters
// Security level - Medium
type qbits = 23
type uint32_t = 32
type q = 0x7fe001 //8380417
type n = 0x100 //256
d = 0xe
wc= 0x3c //60
gamma1 = ((`q) - 1) / 16:[_]
gamma2 = (gamma1/2):[_]
alpha = (2*gamma2):[_]

// Parameters for Number Theoretic Transform (NTT)
rootOfUnity    = 1753 :[_]
rootOfUnityInv = 731434 : [_]
ninv           = 8347681 : [_]

//Parameterize
parameter
    type k : #
    type constraint (fin k, k>=3, k <=6)
    type l : #
    type constraint (fin l, l>=2, l<=5)
    eta : [4]
    beta : [12]
    omega : [8]

// Integer polynomials; a superset of ring R referenced in specification
type intPoly        = [n][uint32_t]
type intPolyVec dim = [dim]intPoly

// Polynomials; a superset of ring R_q referenced in specification
type poly        = [n][qbits] // This is R_q, actually defines a super set of R_q
type polyVec dim = [dim]poly

// Polynomials in NTT representation
type nttPoly          = [n][qbits]
type nttVec dim       = [dim]nttPoly
type nttMat dim1 dim2 = [dim1](nttVec dim2)


type PublicKey = {rho : [256], t1 : intPolyVec k}
type SecretKey = {rho : [256]
                    , K  : [256]
                    , tr : [384]
                    , s1 : polyVec l
                    , s2 : polyVec k
                    , t0 : intPolyVec k}
type SEEDBYTES = 32

/* Generate public and private keys */
//Gen : [SEEDBYTES*8] -> (PublicKey,SecretKey)
Gen seed = A
    where
      randoms = split`{3} (join (SHA3::toBytes (take`{768} (SHA3::SHAKE256 (join (SHA3::toBytes seed))))))
      (rho, rho', K) = (randoms@0, randoms@1, randoms@2)
      A       = ExpandA rho
      s1      = PolyUniformEtaV`{dim=l} rho' zero

private
    pack_w : intPolyVec k -> [4*n*k]
    pack_w w = join [pack_poly p | p <- wBV ]
        where
        wBV = map (\p -> map (\x -> drop`{24} x:[8]) p) w

        pack2 : [2][8] -> [8]
        pack2 xs = xs@0 || (xs@1 << 4)

        pack_poly p = join [ pack2 xs | xs <- split p : [128][2][_] ]

// Only works when n=256
PolyUniformEtaV : {dim} (fin dim, dim>=1,width (dim-1) <= 8) => [256] -> [8] -> polyVec dim
PolyUniformEtaV rho nonce = [PolyUniformEta rho (nonce + j) | j <- [0..(dim-1)]:[dim][8]]

PolyUniformEta : [SEEDBYTES*8] -> [8] -> poly
PolyUniformEta rho nonce = map (\x -> (zero#eta:[23]) - x) (map (\x-> (zero#x):[23]) (take`{n} withinEta))
    where
    seed = rho#nonce
    randoms = ((join (SHA3::toBytes (take`{2*8*136} (SHA3::SHAKE256 (join (SHA3::toBytes seed))))))#zero)
    withinEta = randomsInRangeDouble genS (2*eta) randoms

genS : [8] -> [2][4]
genS byte = [t0, t1]
    where
    t0 = drop`{4} (byte && 0x0F)
    t1 = drop`{4} (byte >> 4)



H : ([384],intPolyVec k) -> poly
H (mu,w) = map fromInteger (SampleInBall ss samples)
    where
    w_packed = pack_w w
    randoms  = join (SHA3::toBytes (take`{4352} (SHA3::SHAKE256 (join (SHA3::toBytes (mu#w_packed))))))
    ss       = take`{60}(reverse (join (reverse (split (take`{64} randoms):[8][8]))))

    extByte : [8] -> [8]
    extByte x = x

    samples : [60][8]
    samples = take`{60} (randomsInRanges extByte [196..255] (drop`{64} randoms#zero))


SampleInBall : [60] -> [60][8] -> [256]Integer
SampleInBall signs jsamples = ys ! 0
    where
    ys = [ zero:[256]Integer ]
        #    [ if i==j then update y i ((-1:Integer)^^(toInteger [s]))
            else updates y [j,i] [(-1:Integer)^^(toInteger [s]),y@j] | i <- [196..255]
        | j <- jsamples
        | s <- signs
        | y <- ys
        ]


ExpandMask : ([SEEDBYTES*8], [384], Integer) -> polyVec l
ExpandMask  (K, mu, kappa) = [samplePoly K mu kappa i `l | i <- [0..(l-1)] ]


samplePoly : [256] -> [384] -> Integer -> Integer -> Integer -> poly
samplePoly K mu kappa i dim = [ (`q + (zero#gamma1:[23]) - (zero#1:[23]) - (zero#vj:[23])) | vj <- coeffs]
    where
    (upper:[20])      =  drop`{3}(2*gamma1-2):[20]
    kappaBytes = join (reverse (split (fromInteger (dim*kappa+i):[16]):[2][8])) // LEB order
    s          = join (SHA3::toBytes (take`{5*8*136} (SHA3::SHAKE256 (join (SHA3::toBytes (K#mu#kappaBytes)))))) // checked
    (coeffs:[n][20])   = take`{n} (randomsInRangeDouble extractPolyElt upper (s#zero))


extractPolyElt : [40] -> [2][20]
extractPolyElt bits = [zero#int1, zero#int2]
    where
    [b0,b1,b2,b3,b4] = [(zero#b):[20] | b <- split bits : [5][8]]
    int1 = b2'*2^^16 + b1*2^^8 +  b0
    int2 = b4*2^^12 + b3*2^^4 +  b2''
    b2'  = b2 && 15
    //b2'' = b2/(16:[20])
    b2'' = b2/16

// seed should be in little endian byte order
CRH : {b} (fin b, b>=1) => [b*8] -> [384]
CRH seed = join (SHA3::toBytes (take`{48*8} (SHA3::SHAKE256 (join (SHA3::toBytes seed)))))


ExpandA : [SEEDBYTES*8] -> [k][l]nttPoly
ExpandA rho = [ [elt i j | j <- [0..(l-1)] ] |  i <- [0..(k-1)] ]
    where
    elt i j = matrixPoly rho i j


matrixPoly : [SEEDBYTES*8] -> [width k] -> [width l] -> nttPoly
matrixPoly rho i j = take`{n} [ drop`{1} elt | elt <- randomElts ]
    where
    randomElts = randomsInRange extractMatElt ((>=) (`q)) (s#zero)
    s          = join (SHA3::toBytes (take`{6720} (SHA3::SHAKE128 (join (SHA3::toBytes (rho#b))))))
    b          = 2^^4*(zero#j:[8])+(zero#i:[8])


extractMatElt : [24] -> [24]
extractMatElt rands = zero#(2^^16 * b2' + 2^^8 * b1 + b0):[24]
    where
    [b0, b1, b2] = [(zero#b):[23] | b <- split`{3} rands]
    b2' = (2^^23-1) && b2 // Typo in paper; following C implementation


randomsInRange : {a} (fin a) => ([a]-> [a]) -> ([a] -> Bit) -> [inf] -> [inf][a]
randomsInRange createElt upperCrit randoms = if (upperCrit elt )
                                             then  [ elt ]#(randomsInRange createElt upperCrit randomTail)
                                             else randomsInRange createElt upperCrit randomTail
                    where
                    elt        = createElt (take`{a} randoms)
                    randomTail = drop`{a} randoms

randomsInRanges : {a,m} (fin a,fin m, m>=1) => ([a]-> [a]) -> [m][a] -> [inf] -> [inf][a]
randomsInRanges createElt uppers randoms =
                                            if elt <= head uppers
                                            then  [ elt ]#(randomsInRanges createElt uppersRotate randomTail)
                                            else randomsInRanges createElt uppers randomTail
                                where
                                elt          = createElt (take`{a} randoms)
                                randomTail   = drop`{a} randoms
                                uppersRotate = uppers <<< 1


randomsInRangeDouble : {a} (fin a) => ([2*a]-> [2][a]) -> [a] -> [inf] -> [inf][a]
//wrong code
/*randomsInRangeDouble createElt upper randoms =
if (elts@0 <= upper) /\ (elts@1 <= upper)
then  elts#(randomsInRangeDouble createElt upper randomTail)
else
if (elts@0 <= upper)
then [ elts@0 ]#(randomsInRangeDouble createElt upper randomTail)
else
if (elts@1 <= upper)
then [ elts@1 ]#(randomsInRangeDouble createElt upper randomTail)
else randomsInRangeDouble createElt upper randomTail
where
elts       = createElt (take`{2*a} randoms)
randomTail = drop`{2*a} randoms*/
// Correction and checked with the C code
randomsInRangeDouble createElt upper randoms =
                                    if (elts@1 <= upper) then [elts@1, elts@1] # (randomsInRangeDouble createElt upper randomTail)
                                    else (randomsInRangeDouble createElt upper randomTail)
            where
            elts       = createElt (take`{2*a} randoms)
            randomTail = drop`{2*a} randoms
