/*
   This module implements the digital signature scheme Dilithium
   submitted to the NIST post-quantum project.

   See https://pq-crystals.org/dilithium/data/dilithium-specification.pdf

   Copyright (c) 2018, Galois Inc.
   www.cryptol.net
   You can freely use this source code for educational purposes.

*/

module Primitive::Asymmetric::Signature::Dilithium::Round1::DilithiumBitVec where

import Primitive::Keyless::Hash::SHAKE::SHAKE128 as SHA3 (shake128)
import Primitive::Keyless::Hash::SHAKE::SHAKE256 as SHA3 (shake256)
import Primitive::Keyless::Hash::utils as SHA3 (toBytes)
import Common::utils
import Common::mod_arith
import Primitive::Asymmetric::Cipher::RSA
import Primitive::Asymmetric::Signature::Dilithium::test::testDilithium


// These parameters are fixed for all four recommended implementations
type qbits = 23
type q = 0x7fe001 //8380417
type n = 0x100 //256
d = 0xe
wc= 0x3c //60
gamma1 = ((`q) - 1) / 16:[qbits]
gamma2 = ( gamma1 / 2 ):[qbits]
alpha = (2*gamma2):[qbits]

// Parameters for Number Theoretic Transform (NTT)
rootOfUnity    = 1753 :[qbits]
rootOfUnityInv = 731434 : [qbits]
ninv           = 8347681 : [qbits]

// Parameterize the types based on the following implemenations
/* Weak, Medium, Recommended, and VeryHigh*/
parameter
    type k : #
    type constraint (fin k, k>=3, k<=6)
    type l : #
    type constraint (fin l, l>=2, l<=5)
    eta : [4]
    beta : [qbits]
    omega : [qbits]

// Integer polynomials; a superset of ring R referenced in specification
type intPoly        = [n][qbits]
type intPolyVec dim = [dim]intPoly

// Polynomials; a superset of ring R_q referenced in specification
type poly        = [n][qbits] // This is R_q, actually defines a super set of R_q
type polyVec dim = [dim]poly

// Polynomials in NTT representation
type nttPoly          = [n][qbits]
type nttVec dim       = [dim]nttPoly
type nttMat dim1 dim2 = [dim1](nttVec dim2)


type PublicKey = {rho : [256], t1 : intPolyVec k}
type SecretKey = {rho : [256]
                    , K  : [256]
                    , tr : [384]
                    , s1 : polyVec l
                    , s2 : polyVec k
                    , t0 : intPolyVec k}
type SEEDBYTES = 32

/* Generate public and private keys */
//Gen : [SEEDBYTES*8] -> (PublicKey,SecretKey)
Gen seed = (pk, sk)
    where
      randoms = split`{3} (join (SHA3::toBytes (take`{768} (SHA3::shake256 (join (SHA3::toBytes seed))))))
      (rho, rho', K) = (randoms@0, randoms@1, randoms@2)
      A       = ExpandA rho
      s1      = PolyUniformEtaV`{dim=l} rho' zero
      s2      = PolyUniformEtaV`{dim=k} rho' (zero + `l)
      s1ntt   = map ntt s1
      As1     = map nttinv (nttMatMul A s1ntt)
      t       = paddV As1 s2
      (t1,t0) = Power2RoundV t
      tr      = CRH (rho#(pack_t1 t1))
      pk      = { rho = rho, t1 = t1}
      sk      = { rho = rho, K = K, tr = tr, s1 = s1, s2 = s2, t0 = t0}

// Known Answer Test
// To check this property, it is necessary to import testDilithium

/*test_key_gen = (pk.rho#(pack_t1 pk.t1) == testCase0.pk) /\
    ((sk.rho#sk.K#sk.tr#(pack_polyeta sk.s1)#(pack_polyeta sk.s2)#(pack_t0 sk.t0)) == testCase0.sk)
    where
    seed     = 0x7c9935a0b07694aa0c6d10e4db6b1add2fd81a25ccb148032dcd739936737f2d
    (pk, sk) = Gen seed
*/
/* Generate signature for message M */      
Sign : {mbytes} (fin mbytes, mbytes>=1) => SecretKey -> [mbytes*8] -> (polyVec l, [k][n], poly)
Sign sk M = (final_state.z, h, nttinv final_state.c')
     where
      A     = ExpandA sk.rho //checked
      mu    = CRH`{b=48+mbytes} (sk.tr#M) // checked
      kappa = zero:Integer
      s1'   = map ntt sk.s1 //checked
      s2'   = map ntt sk.s2 // checked
      t0'   = map ntt (IPVtoPV sk.t0) //checked

      init : sign_var_types
      init = {z=zero,r0=zero,r1=zero,t0'=t0',c'=zero,w=zero,w1=zero
             ,s1'=s1',s2'=s2',cs2=zero,K=sk.K,mu=mu,A=A,kappa=kappa}

      final_state = dowhile sign_condition sign_body init
      ct0         = map nttinv (nttVecConstMul final_state.c' final_state.t0')
      h           = MakeHintV (psubV zero ct0
                              ,paddV (psubV final_state.w final_state.cs2) (ct0)
                              ,2*gamma2
                              )




type sign_var_types = { z   : polyVec l
                          , r0  : intPolyVec k
                          , r1  : intPolyVec k
                          , t0' : nttVec k
                          , c'  : nttPoly
                          , w   : polyVec k
                          , w1  : intPolyVec k
                          , s1' : nttVec l
                          , s2' : nttVec k
                          , cs2 : polyVec k
                          , K   : [256]
                          , mu  : [384]
                          , A   : nttMat k l
                          , kappa: Integer}


sign_condition : sign_var_types -> Bit
sign_condition sv = fail1 \/ fail2
               where
                    fail1 = ((infNormPolyVec (PVtoIPV sv.z)) >= (gamma1-beta))
                            \/ ((infNormPolyVec sv.r0) >= (gamma2-beta))
                            \/ (sv.r1 != sv.w1)
                    fail2 = ((infNormPolyVec (PVtoIPV ct0)) >= gamma2) 
                            \/ ( (foldl (+) 0 (map ones h)) > omega )
                    ct0   = map nttinv (nttVecConstMul sv.c' sv.t0')
                    h     = MakeHintV (psubV zero ct0
                                      ,paddV (psubV sv.w sv.cs2) (ct0)
                                      ,2*gamma2
                                      )


sign_body : sign_var_types -> sign_var_types
sign_body sv = {z=z,r0=r0,r1=r1,t0'=sv.t0',c'=c',w=w,w1=w1,s1'=sv.s1',s2'=sv.s2',
                   cs2=cs2,K=sv.K,mu=sv.mu,A=sv.A,kappa=(sv.kappa+1)}
              where
                y   = ExpandMask(sv.K,sv.mu,sv.kappa)// checked
                y'  = map ntt y // checked
                w   = map nttinv (nttMatMul sv.A y') // checked
                w1  = HighBitsV (w, 2 * gamma2) // checked
                c'  = ntt ( H (sv.mu,w1) ) // corrected it
                cs1 = map nttinv (nttVecConstMul c' sv.s1')
                cs2 = map nttinv (nttVecConstMul c' sv.s2')
                z   = paddV y cs1
                (r1, r0) = DecomposeV (psubV w cs2, 2 * gamma2)




/*Verify : {mbytes} (fin mbytes, mbytes>=1) => PublicKey -> [mbytes*8] -> (polyVec l, [k][n], poly) -> Bit
Verify pk M (z, h, c) = crit1 && crit2 && crit3
       where
        A        = ExpandA pk.rho
        mu       = CRH`{b=48+mbytes} ((CRH (pk.rho#(pack_t1 pk.t1)))#M)
        zntt     = map ntt z
        t1ntt    = map ntt (IPVtoPV pk.t1)
        ct1ntt   = nttVecConstMul (psub zero c) t1ntt
        ct1ntt2d = map (\p -> map (\x -> x*(2^^d)) p) ct1ntt 
        Az       = nttMatMul A zntt
        w1'      = UseHintV (h, paddV Az ct1ntt2d, 2*gamma2)
        zint     = PVtoIPV z
        zinf     = infNormPolyVec zint
        crit1    = zinf < gamma1 - beta
        crit2    = c == H(mu,w1')
        crit3    = (foldl (+) 0 (map ones h)) <= omega*/




pack_w : intPolyVec k -> [4*n*k]
pack_w w = join [pack_poly p | p <- wBV ]
    where
    wBV = map (\p -> map (\x -> drop`{15} x:[8]) p) w
    pack2 : [2][8] -> [8]
    pack2 xs = xs@0 || (xs@1 << 4)
    pack_poly p = join [ pack2 xs | xs <- split p : [128][2][_] ]

    /*pack_polyeta : {m} (fin m, m >= 1) =>  polyVec m -> [4*n*m]
pack_polyeta s = join [ join [elt p i | i <- [0..(n/2)-1]:[_][8] ] | p <- s ]
             where
              elt : poly -> [qbits] -> [qbits]
              elt p i = (c (toInteger (p@(2*i+0)))) || ((c (toInteger (p@(2*i+1)))) << 4)
              c : Integer -> [qbits]
              c num = if num > eta then  (`q + eta - num) else  (eta - num)

pack_t0 : intPolyVec k -> [k*3584]
pack_t0 t0 = join [ pack_poly p | p <- t0 ]
        where
          tmp : intPoly -> [8] -> [8] -> [qbits]
          tmp p i j =  (2^^13 - p@(4*i+j))

          pack_poly : intPoly -> [3584]
          pack_poly p = join [ join [drop`{24} (tmp p i 0),
                     drop`{24} (((tmp p i 0) >> 8) || ((tmp p i 1) << 6)),
                     drop`{24} ((tmp p i 1) >> 2),
                     drop`{24} (((tmp p i 1) >> 10) || ((tmp p i 2) << 4)),
                     drop`{24} ((tmp p i 2) >> 4),
                     drop`{24} (((tmp p i 2) >> 12) || ((tmp p i 3) << 2)),
                     drop`{24} ((tmp p i 3) >> 6)
                     ] | i <- [0..(n/4-1)] ] */


// d must be 14 for this to work, and n must be 256

pack_t1 : intPolyVec k -> [k*288*8]
pack_t1 t1 = join [pack_poly p | p <- t1BV]
        where
              t1BV = map (\p -> map (\x -> drop`{14} x) p) t1
              pack8 : [8][9] -> [9][8]
              pack8 xs = map drop`{1} [ xs@0 && zero#0xFF
                                      , xs@0 >> 8 || ((xs@1 && zero#0x7F) << 1)
                                      , xs@1 >> 7 || ((xs@2 && zero#0x3F) << 2)
                                      , xs@2 >> 6 || ((xs@3 && zero#0x1F) << 3)
                                      , xs@3 >> 5 || ((xs@4 && zero#0x0F) << 4)
                                      , xs@4 >> 4 || ((xs@5 && zero#0x07) << 5)
                                      , xs@5 >> 3 || ((xs@6 && zero#0x03) << 6)
                                      , xs@6 >> 2 || ((xs@7 && zero#0x01) << 7)
                                      , xs@7 >> 1
                                      ]
              pack_poly p = join [join (pack8 xs) | xs <- split p : [32][8][_]]

/*pack_sig : (polyVec l, [k][n], poly) -> [SIG_SIZE_PACKED]
pack_sig (z, h, c) =
        where s0 = polyz_pack (z)
              s1 = encode (h)
              s2 = encode (c)
polyz_pack : poly ->[n*qbits]
polyz_pack a = [  | i <- [0..n/2] ]*/

// Only works when n=256
PolyUniformEtaV : {dim} (fin dim, dim>=1,width (dim-1) <= 8) => [256] -> [8] -> polyVec dim
PolyUniformEtaV rho nonce = [PolyUniformEta rho (nonce + j) | j <- [0..(dim-1)]:[dim][8]]

PolyUniformEta : [SEEDBYTES*8] -> [8] -> poly
PolyUniformEta rho nonce = map (\x -> (zero#eta:[23]) - x) (map (\x-> (zero#x):[23]) (take`{n} withinEta))
    where
        seed = rho#nonce
        randoms = ((join (SHA3::toBytes (take`{2*8*136} (SHA3::shake256 (join (SHA3::toBytes seed))))))#zero)
        withinEta = randomsInRangeDouble genS (2*eta) randoms

        genS : [8] -> [2][4]
        genS byte = [t0, t1]
            where
            t0 = drop`{4} (byte && 0x0F)
            t1 = drop`{4} (byte >> 4)



H : ([384],intPolyVec k) -> poly
H (mu,w) = map fromInteger (SampleInBall ss samples)
  where
    w_packed = pack_w w
    randoms  = join (SHA3::toBytes (take`{4352} (SHA3::shake256 (join (SHA3::toBytes (mu#w_packed))))))
    ss       = take`{60}(reverse (join (reverse (split (take`{64} randoms):[8][8]))))

    extByte : [8] -> [8]
    extByte x = x

    samples : [60][8]
    samples = take`{60} (randomsInRanges extByte [196..255] (drop`{64} randoms#zero))


SampleInBall : [60] -> [60][8] -> [256]Integer
SampleInBall signs jsamples = ys ! 0
              where
              ys = [ zero:[256]Integer ]
                    # [ if i==j then update y i ((-1:Integer)^^(toInteger [s]))
                        else updates y [j,i] [(-1:Integer)^^(toInteger [s]),y@j] | i <- [196..255]
                                                                  | j <- jsamples
                                                                  | s <- signs
                                                                  | y <- ys
                      ]


ExpandMask : ([SEEDBYTES*8], [384], Integer) -> polyVec l
ExpandMask  (K, mu, kappa) = [samplePoly K mu kappa i `l | i <- [0..(l-1)] ]


samplePoly : [SEEDBYTES*8] -> [384] -> Integer -> Integer -> Integer -> poly
samplePoly K mu kappa i dim = (map (\x -> (`q+gamma1-1-(zero#x))) coeffs)
    where
        (upper:[20])      =  drop`{3}(2*gamma1-2):[20]
        kappaBytes = join (reverse (split (fromInteger (dim*kappa+i):[16]):[2][8])) // LEB order
        s          = join (SHA3::toBytes (take`{5*8*136} (SHA3::shake256 (join (SHA3::toBytes (K#mu#kappaBytes)))))) // checked
        (coeffs:[n][20])   = take`{n} (randomsInRangeDouble extractPolyElt upper (s#zero))


extractPolyElt : [40] -> [2][20]
extractPolyElt bits = [zero#int1, zero#int2]
                where
                [b0,b1,b2,b3,b4] = [(zero#b):[20] | b <- split bits : [5][8]]
                int1 = b2'*2^^16 + b1*2^^8 +  b0
                int2 = b4*2^^12 + b3*2^^4 +  b2''
                b2'  = b2 && 15
                //b2'' = b2/(16:[20])
                b2'' = b2/16
// seed should be in little endian byte order
CRH : {b} (fin b, b>=1) => [b*8] -> [384]
CRH seed = join (SHA3::toBytes (take`{48*8} (SHA3::shake256 (join (SHA3::toBytes seed)))))


ExpandA : [SEEDBYTES*8] -> [k][l]nttPoly
ExpandA rho = [ [elt i j | j <- [0..(l-1)] ] |  i <- [0..(k-1)] ]
        where
          elt i j = matrixPoly rho i j


matrixPoly : [SEEDBYTES*8] -> [width k] -> [width l] -> nttPoly
matrixPoly rho i j = take`{n} [ drop`{1} elt | elt <- randomElts ]
            where
            randomElts = randomsInRange extractMatElt ((>=) (`q)) (s#zero)
            s          = join (SHA3::toBytes (take`{6720} (SHA3::shake128 (join (SHA3::toBytes (rho#b))))))
            b          = 2^^4*(zero#j:[8])+(zero#i:[8])


extractMatElt : [24] -> [24]
extractMatElt rands = zero#(2^^16 * b2' + 2^^8 * b1 + b0):[24]
                where
                  [b0, b1, b2] = [(zero#b):[23] | b <- split`{3} rands]
                  b2' = (2^^23-1) && b2 // Typo in paper; following C implementation


/*

  Supporting Algorithms; see Figure 3

*/

Power2Round : [qbits] -> ([qbits],[qbits]) -> ([qbits],[qbits])
Power2Round q (r,d') = ((r'-r0)/2^^d',r0)
            where r' = mod_pow (zero#q, r, 1)
                  r0 = centered_mod r' (2^^d')

Power2RoundV : {dim} (fin dim, dim >= 1) => polyVec dim -> ([dim]intPoly,[dim]intPoly)
Power2RoundV v = unzip (map polyPower2Round v)
              where
              polyPower2Round p = unzip [ Power2Round `q (zero#r, zero#d)
                                        | r <- p
                                        ]

Decompose : [qbits] -> ([qbits],[qbits]) -> ([qbits],[qbits])
Decompose q (r,a) = if (r' - r0) == ((zero#q-1):[qbits]) then (zero:[qbits], (zero#r0 - 1):[qbits])
                                        else (((r' - r0) / a):[qbits], (zero#r0):[qbits])
          where r' =  mod_pow (zero#q, r, 1)
                r0 = centered_mod r' a

DecomposeV : (polyVec k , [qbits]) -> (intPolyVec k, intPolyVec k)
DecomposeV (r,a) = unzip [ DecomposePoly p | p <- r ]
            where
            DecomposePoly p = unzip [Decompose `q (zero#x,a) | x <- p]

HighBits : [qbits] -> ([qbits],[qbits]) -> [qbits]
HighBits q (r,a) = (Decompose q (r,a)).0

HighBitsV : (polyVec k , [qbits]) -> intPolyVec k
HighBitsV (r,a) = r1
          where
            (r1,r0) = DecomposeV (r,a)


LowBits : [qbits] -> ([qbits],[qbits]) -> [qbits]
LowBits q (r,a) = (Decompose q (r,a)).1


MakeHint : [qbits] -> ([qbits],[qbits], [qbits]) -> Bit
MakeHint q (z,r,a) = r1 != v1
          where r1 = HighBits q (r,a)
                v1 = HighBits q (r + z,a)

MakeHintV : (polyVec k, polyVec k, [qbits]) -> [k][n]
MakeHintV (z,r,a) = [[x1 != x2 | x1 <- p1 | x2 <- p2] | p1 <- r1 | p2 <- v1]
          where
            r1 = HighBitsV (r,a)
            v1 = HighBitsV (polyVecSum z r,a)


UseHint : [qbits] -> (Bit,[qbits], [qbits]) -> [qbits]
UseHint q (h,r,a) = if h then zero#r1' else r1
        where
          (m :[qbits]) = ((zero#q - 1) / a)
          (r1, r0) = Decompose q (r, a)
          r1'      = if r0 > 0 then mod_pow (m, (r1 + 1), 1) else mod_pow (m, (r1 - 1), 1)


UseHintV : ([k][n], polyVec k, [qbits]) -> intPolyVec k
UseHintV (hvec, rvec, a) = [polyUseHint hpoly rpoly
                              | hpoly <- hvec
                              | rpoly <- rvec
                              ]
            where
            polyUseHint hpoly rpoly = [ UseHint `q (h, zero#r, a)
                                      | h <- hpoly
                                      | r <- rpoly
                                      ]




/*

  Utility functions

*/

ones : {a} (fin a, a >= 1) => [a] -> [qbits]
ones bv = foldl (+) 0 bva
      where
        bva = map (\x-> zero#x:[qbits]) (split bv:[_][1])

IPVtoPV : {dim} (fin dim, dim >= 1) => intPolyVec dim -> polyVec dim
IPVtoPV intp = map (\p -> map drop`{qbits-qbits}p) intp


PVtoIPV : {dim} (fin dim, dim >= 1) => polyVec dim -> intPolyVec dim
PVtoIPV pvec = map (\p -> map (\i -> zero#i) p) pvec


centered_mod : [qbits] -> [qbits] -> [qbits]
centered_mod x n = if r > (n/2) then r - n
                    else r
              where r = x % n


randomsInRange : {a} (fin a) => ([a]-> [a]) -> ([a] -> Bit) -> [inf] -> [inf][a]
randomsInRange createElt upperCrit randoms = if (upperCrit elt )
                                then  [ elt ]#(randomsInRange createElt upperCrit randomTail)
                                else randomsInRange createElt upperCrit randomTail
                                where
                                elt        = createElt (take`{a} randoms)
                                randomTail = drop`{a} randoms

randomsInRanges : {a,m} (fin a,fin m, m>=1) => ([a]-> [a]) -> [m][a] -> [inf] -> [inf][a]
randomsInRanges createElt uppers randoms =
                if elt <= head uppers
                then  [ elt ]#(randomsInRanges createElt uppersRotate randomTail)
                else randomsInRanges createElt uppers randomTail
                where
                  elt          = createElt (take`{a} randoms)
                  randomTail   = drop`{a} randoms
                  uppersRotate = uppers <<< 1


randomsInRangeDouble : {a} (fin a) => ([2*a]-> [2][a]) -> [a] -> [inf] -> [inf][a]
//wrong code
/*randomsInRangeDouble createElt upper randoms =
                if (elts@0 <= upper) /\ (elts@1 <= upper)
                then  elts#(randomsInRangeDouble createElt upper randomTail)
                else
                  if (elts@0 <= upper)
                  then [ elts@0 ]#(randomsInRangeDouble createElt upper randomTail)
                  else
                    if (elts@1 <= upper)
                    then [ elts@1 ]#(randomsInRangeDouble createElt upper randomTail)
                    else randomsInRangeDouble createElt upper randomTail
                where
                  elts       = createElt (take`{2*a} randoms)
                  randomTail = drop`{2*a} randoms*/
// Correction and checked with the C code
randomsInRangeDouble createElt upper randoms =
                if (elts@1 <= upper) then [elts@1, elts@1] # (randomsInRangeDouble createElt upper randomTail)
                else (randomsInRangeDouble createElt upper randomTail)
                where
                elts       = createElt (take`{2*a} randoms)
                randomTail = drop`{2*a} randoms

/*

  Supporting polynomial and polynomial vector functions

*/

modSum : { s, m } (fin s, fin m) => ([s], [m][s]) -> [s]
modSum (p, l) = sums!0
    where
    sums = [ zero ] # [ mod_add`{s}(p, x, y) | x <- l | y <- sums ]

ntt : poly -> nttPoly
ntt p = nttp
    where
    r k = mod_pow(`q, rootOfUnity, k)
    exponents = join [ [zext i, (256 + (zext i))] | i <- [reverse ((128+i) : [8]) | i <- [0..127] ] ]
    nttp = [ modSum (`q, [ (mod_mul(`q, (p@idx), (mod_pow (`q, (r k), i)))) | idx<-[0..(n-1)]:[n][width n] | i<-[0..(n-1)]:[n][qbits]])
           | k <- exponents
           ]

nttinv : nttPoly -> poly
nttinv p' = p'
    /*   where
        pu = reorder p'
        r' i = rootOfUnityInv^^(i*2)
        p = [fromInteger (fromZ`{q} (sum [(r' (BVtoZ`{q}(i*j)))
                                                | jdx<-[0..(n-1)]:[n][width n]
                                                | j<-[0..(n-1)]:[n](Z q)
                                         ])):[23]
            | i <- [0..255]
            ]*/

// Dilithium uses a non-standard ordering of elements in the NTT domain; this function reorders the elements.
reorder : nttPoly -> nttPoly
reorder a = join [ [a1 @ i, a2 @ i] | i <- [0..127]:[_][8] ]
        where
          a1 = a @@ [ (i-1)/2 | i <- [reverse ((128+i) : [8]) | i <- [0..127] ] ]
          a2 = reverse (a @@ [ (511 - (zero#i):[9])/2 | i <- [reverse ((128+i) : [8]) | i <- [0..127] ] ])



// Operations on NTT polynomials

nttMatMul : {dim1,dim2} (fin dim1,fin dim2) => nttMat dim1 dim2 -> nttVec dim2 -> nttVec dim1
nttMatMul mat vec = [ nttDotProduct v vec | v <- mat ]

nttDotProduct : {dim} (fin dim) => nttVec dim -> nttVec dim -> nttPoly
nttDotProduct v1 v2 = foldl padd (zero:nttPoly) [ nttPolyMult p1 p2 | p1 <- v1 | p2 <- v2 ]

nttPolyMult : nttPoly -> nttPoly -> nttPoly
nttPolyMult p1 p2 = [ x * y | x <- p1 | y <- p2]

nttVecConstMul : {dim} (fin dim) => nttPoly -> nttVec dim -> nttVec dim
nttVecConstMul c v = map (nttPolyMult c) v

polyVecSum :  {dim} (fin dim) => polyVec dim -> polyVec dim -> polyVec dim
polyVecSum v1 v2 = map nttinv (paddV v1' v2')
            where
            v1' = map ntt v1
            v2' = map ntt v2

// Polynomial addition and subtraction
padd : [n][qbits] -> [n][qbits] -> [n][qbits]
padd p1 p2 = [ x + y | x <- p1 | y <- p2 ]


psub : [n][qbits] -> [n][qbits] -> [n][qbits]
psub p1 p2 = [ x - y | x <- p1 | y <- p2 ]


psubV : {dim} (fin dim) => [dim][n][qbits] -> [dim][n][qbits] -> [dim][n][qbits]
psubV v1 v2 = zipWith psub v1 v2


paddV : {dim} (fin dim) => [dim][n][qbits] -> [dim][n][qbits] -> [dim][n][qbits]
paddV v1 v2 = zipWith padd v1 v2



// Aux functions

infNorm : [qbits] -> [qbits]
infNorm x =  (centered_mod x `q)

infNormPoly : intPoly -> [qbits]
infNormPoly p = foldl max 0 p_centered
            where
              p_centered = map infNorm p

infNormPolyVec : {dim} (fin dim, dim>=1) => intPolyVec dim -> [qbits]
infNormPolyVec v = foldl max 0 (map infNormPoly v)





