/*
   This module implements the digital signature scheme Dilithium
   submitted to the NIST post-quantum project.

   See https://pq-crystals.org/dilithium/data/dilithium-specification.pdf
   Copyright (c) 2018-2021, Galois Inc.
   www.cryptol.net
   You can freely use this source code for educational purposes.
*/

/* From now on, I follow the following naming conventions:
* types, modules -- upper camel case
* constants -- upper flat case
* functions, properties -- camel case
* add a space after/before opening/closing bracket of lists, records
* add a space before and after an infix operator
*/

/* Fixes to comply with the round2 submission to NIST */
//1. Randombytes size changed from SeedBytes to 3*SeedBytes from
//2. Expand Mat definition changes


module Primitive::Asymmetric::Signature::Dilithium::Round2::DilithiumParameterized where
import Primitive::Keyless::Hash::SHAKE::SHAKE128 as SHA3 (shake128)
import Primitive::Keyless::Hash::SHAKE::SHAKE256 as SHA3 (shake256)
import Primitive::Keyless::Hash::utils as SHA3 (toBytes)

import Common::utils (dowhile, unzip)
import Common::bv (safe_add, safe_sub, safe_product, safe_mod)
import Common::mod_arith (mod_pow)
import Primitive::Asymmetric::Signature::Dilithium::test::test_latest (testCase1)


// Parameterize the types based on the implemenations, weak, medium, recommended, and very-high
parameter
    type k : #
    type constraint (fin k, k >= 3, k <= 6)
    type l : #
    type constraint (fin l, l >= 2, l <= 5)
    eta : [QBits]
    beta : [QBits]
    type omega : #
    type constraint (fin Omega, Omega >= 64, Omega <= 120)

// To expose the parameters 
type K = k 
type L = l 
ETA = eta
BETA = beta 
type Omega = omega

// Fixed parameters
type QBits = 23
type UInt32T = 32
type Q = 0x7fe001 //8380417
type N = 0x100 //256
type D = 0xe
WC = 0x3c //60
GAMMA1 = (`Q - 1)/16 : [_]
GAMMA2 = GAMMA1/2 : [_]
ALPHA = 2 * GAMMA2 : [_]
QINV  = 0x00000000fc7fdfff
type SetaBits = 4

// Parameters for Number Theoretic Transform (NTT)
ROOTOFUNITY    = 1753 : [QBits]
ROOTOFUNITYINV = 731434 : [QBits]
NINV           = 8347681 : [QBits]

// Integer polynomials; a superset of ring R referenced in specification
type IntPoly        = Poly
type IntPolyVec dim = [dim]IntPoly

// Polynomials; a superset of ring R_q referenced in specification
type Poly        = [N][QBits] // This is R_q, actually defines a super set of R_q
type PolyVec dim = [dim]Poly

// Polynomials in NTT representation
type NttPoly          = Poly
type NttVec dim       = [dim]NttPoly
type NttMat dim1 dim2 = [dim1](NttVec dim2)

// Public and secret keys
type PublicKey = { rho : [256], t1 : IntPolyVec K }
type SecretKey = { rho : [256], key : [256], tr : [384], s1 : PolyVec L, s2 : PolyVec K, t0 : IntPolyVec K }

// Other types to represent seed bytes etc.
type SeedBytes = 32
type CrhBytes = 48
type PolT1SizePacked = N * (QBits - D)/8 //288
type PolT0SizePacked = N * D/8 //448
type PolEtaSizePacked = N * SetaBits/8 // 128
type PolZSizePacked = N * (QBits - 3)/8 //640
type CryptoPublicKeyBytes = SeedBytes + (K * PolT1SizePacked)
type CryptoSecretKeyBytes = 2 * SeedBytes + (L + K) * PolEtaSizePacked + CrhBytes + K * PolT0SizePacked // 2800
type SigSizePacked = L * PolZSizePacked + Omega + K + N/8 + 8 // 2044; also called crypto bytes

// Generate public and private keys 
gen : [3 * SeedBytes * 8] -> (PublicKey, SecretKey)
gen s = (pk, sk)
    where
      [rho, rhop, key] = split`{3} s // rho <- {0, 1}^256, K <- {0,1}^256
      a         = expandA (split rho) // A ∈ R^(k×l)_q := expandA(rho)
      s1        = polyUniformEtaVec`{dim = L} rhop zero // s1 <- s^l_η
      s2        = polyUniformEtaVec`{dim = K} rhop `L // s2 <- s^k_η
      s1Hat     = map ntt s1
      as1       = map nttInv (nttMatMul a s1Hat)
      t         = polyVecAdd as1 s2     // t := as1 + s2
      (t1, t0)  = power2RoundPolyVec t  // (t1, t0) := Power2Round_q(t, d=4)
      tr        = crh (rho # (packT1 t1)) // tr ∈ {0,1}^384 := crh(rho||t1)
      pk        = { rho = rho, t1 = t1 }
      sk        = { rho = rho, key = key, tr = tr, s1 = s1, s2 = s2, t0 = t0 }

// Known Answer Test
// To check this property, it is necessary to import testDilithium
//testKeyGen = (pk.rho # (packT1 pk.t1) == testCase1.pk) /\
//    ((sk.rho # sk.key # sk.tr # (packPolyEtaVec sk.s1) # (packPolyEtaVec sk.s2) # (packT0 sk.t0)) == testCase1.sk)
//    where
//    (pk, sk) = gen (join testCase1.seed)

// Generate signature for message M 
// Corresponds to crypto_sign_signature
sign : { mbytes } (fin mbytes, mbytes >= 0) => SecretKey -> [mbytes * 8] -> (PolyVec L, PolyVec K, Poly)
sign sk m = (finalState.z, h, nttInv finalState.cHat)
     where
      mat   = expandA (split sk.rho) // A ∈ R^(k×l)_q := expandA(ρ)
      mu    = crh`{b = 48 + mbytes} (sk.tr # m) // μ ∈{0,1}^384 := crh(tr||M)
      kappa = zero // κ := 0
      s1Hat   = map ntt sk.s1
      s2Hat   = map ntt sk.s2
      t0Hat   = map ntt sk.t0
      init : SignVarTypes
      init = { z = zero
             , r0 = zero
             , r1 = zero
             , t0Hat = t0Hat
             , cHat = zero
             , w = zero
             , w1 = zero 
             , s1Hat = s1Hat
             , s2Hat = s2Hat
             , cs2 = zero
             , key = sk.key
             , mu = mu
             , a = mat
             , kappa = kappa 
             }
      finalState = dowhile signCondition signBody init
      ct0        = map nttInv (nttVecConstMul finalState.cHat finalState.t0Hat)
      h          = makeHintPolyVec (polyVecSub zero ct0, polyVecAdd (polyVecSub finalState.w finalState.cs2) ct0)
  
type SignVarTypes = { z : PolyVec L
                    , r0  : IntPolyVec K
                    , r1  : IntPolyVec K
                    , t0Hat : NttVec K
                    , cHat  : NttPoly
                    , w   : PolyVec K
                    , w1  : IntPolyVec K
                    , s1Hat : NttVec L
                    , s2Hat : NttVec K
                    , cs2 : PolyVec K
                    , key   : [256]
                    , mu  : [384]
                    , a   : NttMat K L
                    , kappa: [16]
                    }

signCondition : SignVarTypes -> Bit
signCondition sv = fail1 \/ fail2
                   where
                    fail1 = (infNormPolyVec sv.z >= (GAMMA1 - BETA)) // ||z||_∞ ≥ γ1 - β
                            \/ (infNormPolyVec sv.r0 >= (GAMMA2 - BETA)) // ||r0||_∞ ≥ γ2 - β
                            \/ (sv.r1 != sv.w1) // r1 ≂̸ w1
                    fail2 = (infNormPolyVec ct0 >= GAMMA2) // ||ct0||_∞ ≥ γ2
                            \/ ((foldl (+) 0 cones) > `Omega) // number of ones in h > ω
                    cones = sum (map (\x -> (map onesBv x)) h)
                    ct0   = map nttInv (nttVecConstMul sv.cHat sv.t0Hat)
                    // h := makeHintPolyVec(-ct0, w-cs2+ct0, 2γ2)
                    h     = makeHintPolyVec (polyVecSub zero ct0, polyVecAdd (polyVecSub sv.w sv.cs2) ct0)
                                      
signBody : SignVarTypes -> SignVarTypes
signBody sv = { z = z
              , r0 = r0
              , r1 = r1
              , t0Hat =sv.t0Hat
              , cHat = cHat
              , w = w
              , w1 = w1
              , s1Hat = sv.s1Hat
              , s2Hat = sv.s2Hat
              , cs2 = cs2 
              , key = sv.key
              , mu = sv.mu
              , a = sv.a
              , kappa = (sv.kappa + 1)
              }
              where
                rhop  = crh`{b = CrhBytes + SeedBytes} (sv.key # sv.mu) // rhop ∈ {0,1}^384 := crh(K||μ) (or rhop <- {0,1}^384 for randomized signing)
                y   = expandMask((split rhop), sv.kappa)// y ∈ S^l_(γ1-1) := expandMask(rhop,κ)
                yHat  = map ntt y // checked
                w   = map nttInv (nttMatMul sv.a yHat) // w := Ay
                w1  = (decomposePolyVec w).0  // w1 := highBitsPolyVec(w, 2γ2)
                cHat  = ntt (hash (sv.mu, w1)) // c ∈ B_(60) := hash(μ||w1)
                cs1 = map nttInv (nttVecConstMul cHat sv.s1Hat) // cs1 := cHat.s1Hat
                cs2 = map nttInv (nttVecConstMul cHat sv.s2Hat) // cs2 := cHat.s2Hat
                z   = polyVecAdd y cs1 // z:= y+cs1
                (r1, r0) = decomposePolyVec (polyVecSub w cs2) // Decompose_q(w-cs2, 2γ2)

// cryptoSign appends message at the end of the signature
cryptoSign : { mbytes } (fin mbytes, mbytes >= 0) => SecretKey -> [mbytes * 8] -> [(SigSizePacked + mbytes) * 8]
cryptoSign sk m = packSig (sign sk m) # m

// Opening signature
open : { mbytes } (fin mbytes, mbytes >= 0) => PublicKey -> [(SigSizePacked + mbytes)][8] -> Bit
open pk sm =  verify pk (join (drop`{ SigSizePacked } sm)) (unpackSig (take`{ SigSizePacked } sm))

// Verify signature
verify : { mbytes } (fin mbytes, mbytes >= 0) => PublicKey -> [mbytes * 8] -> (PolyVec L, PolyVec K, Poly) -> Bit
verify pk m (z, h, c) = crit1 && crit2 && crit3
       where
        a        = expandA (split pk.rho) // A ∈ R^(k×l)_q := expandA(ρ)
        mu       = crh`{b = 48 + mbytes} ((crh (pk.rho#(packT1 pk.t1))) # m) // μ ∈{0,1}^384 := crh(crh(ρ||t1)||M)
        zntt     = map ntt z // NTT(z)
        t1dot2d  = map ntt (map (\p -> map (\x ->  mod_mul(`Q, x, (2^^14))) p) pk.t1) // t1.2^^d where d=14
        nttt1dot2d = map ntt t1dot2d
        ct1ntt   = nttVecConstMul (polySub zero c) nttt1dot2d // -ct1
        az       = nttMatMul a zntt
        w1'      = useHintPolyVec (h, polyVecAdd az ct1ntt)
        zint     = z
        zinf     = infNormPolyVec zint // ||z||_∞
        crit1    = zinf < GAMMA1 - BETA
        crit2    = c == hash(mu,w1')
        cones    = sum (map (\x -> (map onesBv x)) h)
        crit3    = ( (foldl (+) 0 cones) > `Omega ) // number of 1's in h ≤ ω // TODO: fix this
private 
  onesBv : { n } (fin n, n >= 1) => [n] -> [n]
  onesBv xs =  l!0
      where l = [ 0 ] # [ (if xs@i then j + 1 else j):[n] | i <- [ 0..N - 1 ] | j <- l ]

//:prove (\x -> (onesBv x) == fromInteger (ones x)):[QBits]-> Bit

// Bit-packing polyvec
packW : IntPolyVec K -> [4 * N * K]
packW w = join [pack_poly p | p <- wBV ]
    where
    wBV = map (\p -> map (\x -> drop`{15} x:[8]) p) w
    pack2 : [2][8] -> [8]
    pack2 xs = xs@0 || (xs@1 << 4)
    pack_poly p = join [ pack2 xs | xs <- split p : [128][2][_] ]

// Bit-pack polynomial with coefficients in [Q-ETA, Q+ETA].
// Output coefficients are assumed to be lie in [-ETA, ETA].
packPolyEta : Poly -> [4 * N]
packPolyEta p = join [ packCoeff (p@(2*i+0) % `Q) || ((packCoeff (p@(2*i+1) % `Q)) << 4) | i <- [0..(N/2)-1]:[_][8] ]
    where
    packCoeff : [QBits] -> [8]
    packCoeff num = drop (if num > ETA then `Q + ETA - num else ETA - num)

packPolyEtaVec : {m} (fin m, m >= 1) =>  PolyVec m -> [4 * N * m]
packPolyEtaVec pv = join [ packPolyEta p | p <- pv ]
 
/*unpackPolyEta :  {m} (fin m, m >= 1) =>[m*PolEtaSizePacked][8] -> PolyVec m
unpackPolyEta pvb =  [ elt a | a <- split pvb:[m][128][8] ]
      where
        elt :[128][8] -> Poly
        elt a = join [ [ zext (x && 0x0F), zext (x >> 4)] | x <- a ]*/

// Unpacking polynomial with coefficients in [-ETA, ETA].
// Output coefficients are assumed to be lie in [Q-ETA, Q+ETA].
unpackPolyEta : [PolEtaSizePacked][8] -> [N][QBits]
unpackPolyEta p = join [ [ drop`{9}(`Q + (zext ETA) - (zext (x && 0x0F))), drop`{9} (`Q + (zext ETA) - (zext (x >> 4))) ] | x <- p ]

unpackPolyEtavec : { m } (fin m, m >= 1) =>[m][PolEtaSizePacked][8] -> [m][256][QBits]
unpackPolyEtavec pvb =  [ unpackPolyEta pb | pb <- pvb ]

// Bit-pack polynomial t0 with coefficients in ]-2^{D-1}, 2^{D-1}].
polyT0Pack : IntPoly -> [PolT0SizePacked * 8]
polyT0Pack p = join [ join [drop`{15} (tmp i 0),
                       drop`{15} (((tmp i 0) >> 8) || ((tmp i 1) << 6)),
                       drop`{15} ((tmp i 1) >> 2),
                       drop`{15} (((tmp i 1) >> 10) || ((tmp i 2) << 4)),
                       drop`{15} ((tmp i 2) >> 4),
                       drop`{15} (((tmp i 2) >> 12) || ((tmp i 3) << 2)),
                       drop`{15} ((tmp i 3) >> 6)
                    ] | i <- [0..(N/4-1)] ]
        where
          tmp : [8] -> [8] -> [QBits]
          tmp i j =  (`Q+2^^13 - p@(4*i+j))

packT0 : IntPolyVec K -> [K * PolT0SizePacked * 8]
packT0 t0 = join [ polyT0Pack p | p <- t0 ]

// Unpack polynomial t0
polyT0Unpack : [PolT0SizePacked][8] -> IntPoly
polyT0Unpack p = join[ [ (tmp i 0) || (zext ((tmp i 1) && zext 0x3F)) << 8,
                          (zext ((tmp i 1) >> 6)) || (zext (tmp i 2)) << 2 || (zext ((tmp i 3) && zext 0x0F)) << 10,
                          (zext ((tmp i 3) >> 4)) || (zext (tmp i 4)) << 4 || (zext ((tmp i 5) && zext 0x03)) << 12,
                          (zext ((tmp i 5) >> 2)) || (zext (tmp i 6)) << 6
                        ] | i <- [0..(N/4-1)]
                      ]
          where
            tmp : [8] -> [8] -> [QBits]
            tmp i j =  zext (2^^13 - p@(7*i+j))

unpackT0 : [K][PolT0SizePacked][8] -> IntPolyVec K
unpackT0 pv = [ (polyT0Unpack pv') | pv' <- pv]

// D must be 14 for this to work, and n must be 256
// Bit-pack polynomial t1 with coefficients fitting in 9 bits.
// Input coefficients are assumed to be standard representatives.
polyT1Pack : Poly -> [PolT1SizePacked * 8]
polyT1Pack p = join [ join (pack8 xs) | xs <- split (map (drop`{14}) p) : [32][8][_]]
  where pack8 : [8][9] -> [9][8]
        pack8 xs = map drop`{1} [ xs@0
                        , xs@0 >> 8 || xs@1 << 1
                        , xs@1 >> 7 || xs@2 << 2
                        , xs@2 >> 6 || xs@3 << 3
                        , xs@3 >> 5 || xs@4 << 4
                        , xs@4 >> 4 || xs@5 << 5
                        , xs@5 >> 3 || xs@6 << 6
                        , xs@6 >> 2 || xs@7 << 7
                        , xs@7 >> 1
                        ]

packT1 : PolyVec K -> [K * PolT1SizePacked * 8]
packT1 pvk = (join [ polyT1Pack p | p <- pvk])

// Unpacking polynomial T1
polyT1Unpack : [PolT1SizePacked][8] -> Poly
polyT1Unpack p = map (\x -> zext x) (join [unpack8 xs | xs <- (split p): [32][9][_] ])
    where unpack8: [9][8] -> [8][12]
          unpack8 xs = [ zext (xs@0) || ((zext (xs@1 && 0x01):[12]) << 8)
                       , zext (xs@1 >> 1) || ((zext (xs@2 && 0x03):[12]) << 7)
                       , zext (xs@2 >> 2) || ((zext (xs@3 && 0x07):[12]) << 6)
                       , zext (xs@3 >> 3) || ((zext (xs@4 && 0x0F):[12]) << 5)
                       , zext (xs@4 >> 4) || ((zext (xs@5 && 0x1F):[12]) << 4)
                       , zext (xs@5 >> 5) || ((zext (xs@6 && 0x3F):[12]) << 3)
                       , zext (xs@6 >> 6) || ((zext (xs@7 && 0x7F):[12]) << 2)
                       , zext (xs@7 >> 7) || ((zext (xs@8 && 0xFF):[12]) << 1)
                       ]

unpackT1 : [K][PolT1SizePacked][8] -> PolyVec K
unpackT1  pv = [ (polyT1Unpack p) |  p <- pv]

// Bit-packing public key pk = { rho, t1 } 
packPk :  [SeedBytes][8] -> PolyVec K -> [CryptoPublicKeyBytes * 8]
packPk rho t1 = (join rho) # (packT1 t1)

// Unpacking public key pk into (rho, t1)
unpackPk : [CryptoPublicKeyBytes][8] -> ([SeedBytes][8], PolyVec K)
unpackPk pk = (take`{32} pk, [ polyT1Unpack p | p <- (split (drop`{32} pk):[K][288][_]) ])

// Bit-packing secret key sk = { rho, key, tr, s1, s2, t0 }
packSk : [SeedBytes][8] -> [SeedBytes][8] -> [CrhBytes][8] -> PolyVec L -> PolyVec K -> PolyVec K -> [CryptoSecretKeyBytes * 8]
packSk rho key tr s1 s2 t0 = (join rho) # (join key) # (join tr)# (packPolyEtaVec s1)#(packPolyEtaVec s2) # (packT0 t0)

// Unpacking secret key sk into (rho, key, tr, s1, s2, t0)
unpackSk : [CryptoSecretKeyBytes][8] -> ([SeedBytes][8], [SeedBytes][8], [CrhBytes][8], PolyVec L, PolyVec K, IntPolyVec K)
unpackSk sk = (sk@@[0..31], sk@@[32..63], sk@@[64..111], s1, s2, t0)// key, tr, s1, s2, t0)
        where  s1 = [ unpackPolyEta p | p <- (split (take`{L * PolEtaSizePacked} (drop`{2 * SeedBytes + CrhBytes} sk)):[L][128][8])] //@@[112..L * PolEtaSizePacked-1])
               s2 = [ unpackPolyEta p | p <- (split (take`{K * PolEtaSizePacked} (drop`{L * PolEtaSizePacked} sk)):[K][128][8])] //sk@@[L * PolEtaSizePacked..(L + K)*PolEtaSizePacked-1]
               split_sk = [ [ sk@(i*448 + j) | j<- [0..447]] | i <- [0..(K -1)] ]
               t0 = unpackT0 split_sk //: [K][PolT0SizePacked][8] //sk@@[(L + K)*PolEtaSizePacked..CryptoSecretKeyBytes]

//property packSk_corr x = unpackSk (split (packSk x.0 x.1 x.2 (intToZPolyVec x.3) (intToZPolyVec x.4) x.5)) == x

// Bit-pack polynomial z with coefficients in [-(GAMMA1 - 1), GAMMA1 - 1].
polyZPack : Poly -> [PolZSizePacked][8]
polyZPack p =  join [ (tmp i) | i <- [0..(N/2)-1]]
      where tmp: [8] -> [5][8]
            tmp i  = [r0, r1, r2, r3, r4]
              where
                    t x = GAMMA1 - 1 - p@(2*i+x)
                    t0 = (t 0) + (((sext (t 0))>>31) && `Q)
                    t1 = (t 1) + (((sext (t 1))>>31) && `Q)
                    r0 = drop t0
                    r1 = drop (t0 >> 8)
                    r2 = drop (t0 >> 16) || drop (t1 << 4)
                    r3 = drop (t1 >> 4)
                    r4 = drop (t1 >> 12)

// Unpacking polynomial z
polyZUnpack : [PolZSizePacked][8] -> Poly
polyZUnpack p =  join [ compCoeffs i | i <- [0..(N/2)-1] ]
    where compCoeffs : [10] -> [2][QBits]
          compCoeffs i = [ drop rc0, drop rc1 ]
                where
                  c0 = zero # p@(5*i+0) || (zero # p@(5*i+1):[32]) << 8 || (zero # (p@(5*i+2) && 0x0F):[32]) << 16
                  c1 = zero # p@(5*i+2) >> 4 || (zero # p@(5*i+3):[32]) << 4 || (zero # p@(5*i+4):[32]) << 12
                  mc0 = GAMMA1 - 1 - c0 : [32]
                  mc1 = GAMMA1 - 1 - c1 : [32]
                  rc0 = mc0 + ((mc0 >>$ 31) && `Q)
                  rc1 = mc1 + ((mc1 >>$ 31) && `Q)

// Bit-packing signature
// TODO: to optimize this later
packSig : (PolyVec L, PolyVec K, Poly) -> [SigSizePacked * 8]
packSig (z, h, c) =  zero // s1 # s2
        where s0 = join [ join (polyZPack zp) | zp <- z ]
             /* s2 = encodec c
              s1 = encodeh h
                where
                encodeh : PolyVec K -> [(Omega + K)*8]
                encodeh h = join OmegaUpdates
                  where nzcoeffsIndcs = [ [ (p@j)!=0 | j<-[0..255]]| p<- h]
                        cones = sum (map onesBv nzcoeffsIndcs)
                        sig = zero:[84][8]
                        kUpdates0=[sig]#[(if (nzcoeffsIndcs@0)@i==True then ((update sig' i) i) else ((update sig' i) 0))| i <- [0..255]| sig' <- kUpdates0]
                        kUpdates1=[kUpdates0!0]#[(if (nzcoeffsIndcs@1)@i==True then ((update sig' i) i) else ((update sig' i) 0))| i <- [0..255]| sig' <- kUpdates1]
                        kUpdates2=[kUpdates1!0]#[(if (nzcoeffsIndcs@2)@i==True then ((update sig' i) i) else ((update sig' i) 0))| i <- [0..255]| sig' <- kUpdates2]
                        kUpdates3=[kUpdates2!0]#[(if (nzcoeffsIndcs@3)@i==True then ((update sig' i) i) else ((update sig' i) 0))| i <- [0..255]| sig' <- kUpdates3]
                        OmegaUpdates = (updates (kUpdates3!0) [`Omega+0, `Omega+1, `Omega+2, `Omega+3] [0, 1, 2, 3])
*/
private 
  encodec : Poly -> [(N/8+8)*8]
  encodec p = (join [ [ p@(8*i+j)!=0 | j <- [0..7] ] | i<- [0..(N/8)-1]])# (join sigSigns)
      where
        signs =[0]# [(if (join qm1coeffsIndcs)@i then s||m else s) | s <- signs | m<- masks| i<-[0..255]]
        masks = [1]# [(if (join nzcoeffsIndcs)@i then (m << 1) else m) | m<-masks | i<-[0..255] ]
        nzcoeffsIndcs =  [ [ p@(8*i+j)!=0 | j <- [0..7] ] | i<- [0..(N/8)-1]]
        qm1coeffsIndcs = [ [ p@(8*i+j)==(`Q-1) | j <- [0..7] ] | i<- [0..(N/8)-1]]
        sig = zero:[N/8+8][8]
        sigSigns = [ (signs!0) >>(8*i) | i<-[0..7]]:[8][8]

  decodec : [(N/8+8)][8] -> Poly
  decodec xs = coeffs'!0
    where coeffs = zero : Poly
          signs = [0]#[ ((sext s) || ((sext (xs@(`N/8+i))):[64]) << (8*i)) | i<-[0..7] | s<-signs] :[9][64]
          signs' = [signs!0]#[ (if ((((xs@i) >> j) && 0x01) == 1) then (s >> 1) else s) | j<- [0..255] | s <- signs' | i<- [0..3]]
          coeffs' = [coeffs]#[(if ((((xs@i) >> j) && 0x01)==1) then (update coeff (8*i+j) (1^(-((drop s)&&1))&&(1^(`Q-1)))) else coeff) | i<- [0..7] | j<- [0..255] | s <- signs' | coeff <-coeffs' ]

  decodeh: [(Omega + K)][8] -> PolyVec K
  decodeh xs = pv // it is supposed to be pv'!0
      where
        pv = zero : PolyVec K
        ks = [0]#[ xs@(`Omega+i) | i <- [0..(K-1)] ]
        //pv' = [pv] # join [ [ (if j < (xs@(`Omega+i)) then (updateCoeffs p i j' 1)  else p) | j' <- [xs@j] ]| j<-ks | i<- [0..3] | p <- pv' ] // TODO: fix this
  updateCoeffs :  PolyVec N -> [K] -> [8] -> [QBits] -> PolyVec N
  updateCoeffs pv i j a =  upv
        where upv = (update pv i up)
              up = (update p j a)
              p = pv@i

// Unpacking signature
unpackSig : [SigSizePacked][8] -> (PolyVec L, PolyVec K, Poly)
unpackSig sig = (z, zero, zero)
        where type zlen = L * PolZSizePacked
              z = [ (polyZUnpack p) | p <- split (sig@@[0..zlen - 1]):[L][PolZSizePacked][8] ]
             // h = decodeh (sig@@[zlen..zlen + (Omega + K) - 1])
              //c = decodec (sig@@[zlen + (Omega + K).. SigSizePacked-1])

// This function has been modified in round2
// (uint8_t) D means taking 8 LSBs from D
// polyUniformEta : [SeedBytes*8] -> [8] -> Poly
// Sample polynomial with uniformly random coefficients in [-ETA,ETA]
polyUniformEta : [SeedBytes][8] -> [16] -> Poly
polyUniformEta rho nonce = map (\x -> if ((toInteger ETA) - (toInteger x)) < 0 then (fromInteger  (((toInteger ETA) - (toInteger x))+`Q):[QBits]) else (fromInteger ((toInteger ETA) - (toInteger x)):[QBits])) (take`{N} withinETA)
    where
        seed = (join rho)#(drop`{8} nonce)# (take`{8} nonce)
        randoms = ((join (SHA3::toBytes (take`{2*8*168} (SHA3::shake128 (join (SHA3::toBytes seed)))))) # zero)
        withinETA = randomsInRangeDouble genS (2 * drop`{19}ETA) randoms
        genS : [8] -> [2][4]
        genS byte = [t0, t1]
          where
          t0 = drop`{4} (byte && 0x0F)
          t1 = drop`{4} (byte >> 4)

// Only works when n=256
// This function has been modified in round2
// polyUniformEtaVec : {dim} (fin dim, dim >= 1,width (dim-1) <= 8) => [256] -> [8] -> PolyVec dim // round1
polyUniformEtaVec : {dim} (fin dim, dim >= 1, width (dim - 1) <= 8) => [N] -> [16] -> PolyVec dim
polyUniformEtaVec r nonce = [polyUniformEta (split r) (nonce + j) | j <- [0..(dim-1)]:[dim][16]]

hash : ([CrhBytes * 8], IntPolyVec K) -> Poly
hash (mu,w) = (sampleInBall ss samples)
  where
    w_packed = packW w
    randoms  = join (SHA3::toBytes (take`{4352} (SHA3::shake256 (join (SHA3::toBytes (mu#w_packed))))))
    ss       = take`{60}(reverse (join (reverse (split (take`{64} randoms):[8][8]))))
    extByte : [8] -> [8]
    extByte x = x
    samples : [60][8]
    samples = take`{60} (randomsInRanges extByte [196..255] (drop`{64} randoms#zero))
private 
  sampleInBall : [60] -> [60][8] -> [256][QBits]
  sampleInBall signs jsamples = ys ! 0
                where
                ys = [ zero:[256][QBits]] #
                    [ if i==j then (if [s]==1 then (update y i (`Q-1)) else (update y i 1))  //((-1:Integer)^^(toInteger [s]))
                      else (if [s]==1 then (updates y [j,i] [`Q-1,y@j]) else (updates y [j,i] [1,y@j]))  
                    | i <- [196..255]
                    | j <- jsamples
                    | s <- signs
                    | y <- ys
                    ]

expandMask : ([CrhBytes][8], [16]) -> PolyVec L
expandMask  (rhop, kappa) = [ samplePoly rhop kappa i `L | i <- [0..(L - 1)] ]
private 
  samplePoly : [CrhBytes][8] -> [16] -> [width L] -> [width L] -> Poly
  //samplePoly K mu kappa i dim = (map (\x -> (`q+GAMMA1-1-(zero#x))) coeffs)
  samplePoly rhop kappa i dim = (map (\x -> mod_sub(`Q, mod_sub(`Q, GAMMA1, 1), zero#x)) coeffs)
      where
          (upper:[20])      =  drop`{4}(2*GAMMA1-2):[20]
          kappaBytes = join (reverse (split ((zext dim)*kappa+(zext i)):[2][8])) // LEB order
          s          = join (SHA3::toBytes (take`{5*8*136} (SHA3::shake256 (join (SHA3::toBytes ((join rhop)#kappaBytes)))))) // checked
          (coeffs:[N][20])   = take`{N} (randomsInRangeDouble extractPolyElt upper (s#zero))

  extractPolyElt : [40] -> [2][20]
  extractPolyElt bits = [ zero # int1, zero # int2 ]
                  where
                  [b0,b1,b2,b3,b4] = [(zero#b):[20] | b <- split bits : [5][8]]
                  int1 = b2'*2^^16 + b1*2^^8 +  b0
                  int2 = b4*2^^12 + b3*2^^4 +  b2''
                  b2'  = b2 && 15
                  b2'' = b2/16

// seed should be in little endian byte order
crh : { b } (fin b, b >= 1) => [b * 8] -> [CrhBytes * 8]
crh seed = join (SHA3::toBytes (take`{CrhBytes*8} (SHA3::shake256 (join (SHA3::toBytes seed)))))

// Fixed for round2 submission
expandA : [SeedBytes][8] -> [K][L]NttPoly
expandA rho = [ [ (matrixPoly (join rho) i j) | j <- [0..(L - 1)] ] |  i <- [0..(K - 1)] ]
private 
  matrixPoly : [SeedBytes * 8] -> [width K] -> [width L] -> NttPoly
  matrixPoly rho i j = take`{N} [drop`{1} elt | elt <- randomElts ]
              where
              randomElts = randomsInRange extractMatElt ((>=) (`Q)) (s#zero)
              s          = join (SHA3::toBytes (take`{6720} (SHA3::shake128 (join (SHA3::toBytes (rho#b))))))
              //b        = 2^^4*(zero#j:[8])+(zero#i:[8])
              b          =  drop`{16}(((zero#j:[32]) << 8) + (zero # i:[32]))

  extractMatElt : [24] -> [24]
  extractMatElt rands = zero # (2^^16 * b2' + 2^^8 * b1 + b0):[24]
                  where
                    [b0, b1, b2] = [ zero # b:[QBits] | b <- split`{3} rands ]
                    b2' = (2^^23-1) && b2 // Typo in paper; following C implementation

/* Supporting Algorithms; see Figure 3 */
// For finite field elt r, compute r0, r1 such that 
// r mod Q = r1 * 2^D + r0 with -2^{D-1} < r0 <= 2^{D-1}.
power2Round : [QBits] -> ([QBits],[QBits])
power2Round r = ((r' - r0)/2^^`D, r0) // (r1, r0)
            where r' = mod_pow (`Q, r, 1)
                  r0 = centeredMod r' (2^^`D)

polyPower2Round : {m} [m][QBits] -> ([m][QBits], [m][QBits])
polyPower2Round p = unzip [ power2Round r | r <- p ]

power2RoundPolyVec : {dim} (fin dim, dim >= 1) => PolyVec dim -> ([dim]IntPoly,[dim]IntPoly)
power2RoundPolyVec v = unzip (map polyPower2Round v)

// For a finite field element r, returns (high bits, low bits). 
decompose : [QBits] -> ([QBits],[QBits])
decompose r = if (r' - r0) == (`Q - 1) then (0, r0 - 1)
                    else ((r' - r0) / ALPHA, r0)
          where r' =  mod_pow (`Q, r, 1)
                r0 = centeredMod r' ALPHA

// This is verifiably equivalent to the C code.
decomposeNew : [32] -> ([32],[32])
decomposeNew a = (af, b0)
        where t0 = a && `0x0007FFFF
              t1 = t0 + ((a >> 19) << 9)
              t2 = t1 - ((ALPHA/2) + 1)
              t3 = t2 + ((t2 >>$ 31) && ALPHA)
              t4 = t3 - ((ALPHA/2) - 1)
              a0 = a - t4
              u0 = a0 - 1
              u1 = u0 >>$ 31
              a1 = (a0 >> 19) + 1
              a2 = a1 - (u1 && 1)
              b0 = `Q + t4 - (a2 >> 4)
              af = a2 && 0x0000000f

decomposePoly : Poly -> (Poly, Poly)
decomposePoly p = unzip [ decompose x | x <- p ]

decomposePolyVec : { n } (fin n, n >= 1) => PolyVec n  -> (PolyVec n, PolyVec n)
decomposePolyVec r = unzip [ decomposePoly p | p <- r ]

// Hint bit indicating whether the low bits of the input element overflow into the high bits. 
makeHint : ([QBits], [QBits]) -> Bit
makeHint (z, r) = r1 != v1
          where highBits c = (decompose c).0
                r1 = highBits r
                v1 = highBits r + z

makeHintPoly : (Poly, Poly) -> Poly
makeHintPoly (zp, rp) =  drop res
    where res = [ 0 ] # [ coeff + r | r <- res | coeff <- p ]
          p = [ zext [ makeHintNew (z, r) ] | z <- zp | r <- rp ]

makeHintPolyVec : { n } (fin n, n >= 1) => (PolyVec n, PolyVec n) -> PolyVec n
makeHintPolyVec (zv, rv) =  [ makeHintPoly (zp, rp) | zp <- zv | rp <- rv ]

makeHintNew : ([QBits], [QBits]) -> Bit
makeHintNew (z, r) = if ((z <= GAMMA2) || (z > `Q - GAMMA2) || (z == (`Q - GAMMA2)) && (r == 0)) then False else True

makeHintPolyNew : (Poly, Poly) -> [QBits]
makeHintPolyNew (zp, rp) = foldl (+) 0 [ zext [makeHintNew (z, r)] | z <- zp | r <- rp ]

makeHintPolyVecNew : { n } (fin n, n >= 1) => (PolyVec n, PolyVec n) -> [QBits]
makeHintPolyVecNew (zv, rv) = foldl (+) 0 [ makeHintPolyNew (zp, rp) | zp <- zv | rp <- rv ]

// Correct high bits according to hint bit.
useHint : ([QBits], [QBits]) -> [QBits]
useHint  (r, h) = zext (if b  then drop`{19} (r1 - 1) else t)
        where
          b = ~((h ==0) || (r0 + `Q > `Q))
          t = if (r0 + `Q >`Q) then drop`{19}(r1 + 1) else drop`{19}(r1 - 1)
          (r1, r0) = decompose r

useHintPoly : Poly -> Poly -> Poly
useHintPoly rp hp = [ useHint (r, h) | r <- rp | h <- hp ]

useHintPolyVec : { n }(fin n, n >= 1) => (PolyVec n, PolyVec n) -> PolyVec n
useHintPolyVec (rv, hv) = [ useHintPoly hpoly rpoly
                          | hpoly <- hv
                          | rpoly <- rv
                          ]

/* Utility functions */
/*ones : { a } (fin a, a >= 1) => [a] -> Integer
ones bv = foldl (+) 0 bva
      where
      bva = map toInteger (split bv:[_][1]) */
private 
  centeredMod : [QBits] -> [QBits] -> [QBits]
  centeredMod x n = if r > (n / 2) then r - n else r
                where r = x % n

randomsInRange : { a } (fin a) => ([a]-> [a]) -> ([a] -> Bit) -> [inf] -> [inf][a]
randomsInRange createElt upperCrit randoms = if (upperCrit elt )
                                then  [ elt ]#(randomsInRange createElt upperCrit randomTail)
                                else randomsInRange createElt upperCrit randomTail
                                where
                                elt        = createElt (take`{a} randoms)
                                randomTail = drop`{a} randoms

randomsInRanges : { a, m } (fin a, fin m, m >= 1) => ([a]-> [a]) -> [m][a] -> [inf] -> [inf][a]
randomsInRanges createElt uppers randoms =
                if elt <= head uppers
                then  [ elt ] # (randomsInRanges createElt uppersRotate randomTail)
                else randomsInRanges createElt uppers randomTail
                where
                  elt          = createElt (take`{a} randoms)
                  randomTail   = drop`{a} randoms
                  uppersRotate = uppers <<< 1

randomsInRangeDouble : {a} (fin a) => ([2 * a]-> [2][a]) -> [a] -> [inf] -> [inf][a]
randomsInRangeDouble createElt upper randoms =
                if (elts@0 <= upper) /\ (elts@1 <= upper)
                then  elts # (randomsInRangeDouble createElt upper randomTail)
                else
                  if (elts@0 <= upper)
                  then [ elts@0 ] # (randomsInRangeDouble createElt upper randomTail)
                  else
                    if (elts@1 <= upper)
                    then [ elts@1 ] # (randomsInRangeDouble createElt upper randomTail)
                    else randomsInRangeDouble createElt upper randomTail
                where
                  elts       = createElt (take`{2*a} randoms)
                  randomTail = drop`{2*a} randoms

/* Supporting polynomial and polynomial vector functions */
modSum : { s, m } (fin s, fin m) => ([s], [m][s]) -> [s]
modSum (p, l) = sums!0
    where
    sums = [ zero ] # [ mod_add`{s}(p, x, y) | x <- l | y <- sums ]

ntt : Poly -> NttPoly
ntt p = nttp
    where
    r k = mod_pow(`Q, ROOTOFUNITY, k)
    exponents = join [ [zext i, (256 + (zext i))] | i <- [reverse ((128+i) : [8]) | i <- [0..127] ] ]
    nttp = [ modSum (`Q, [ (mod_mul(`Q, (p@idx), (mod_pow (`Q, (r k), i))))
                         | idx<-[0..(N-1)]:[N][width N]
                         | i<-[0..(N-1)]:[N][QBits]
                         ])
           | k <- exponents
           ]

nttInv : NttPoly -> Poly
nttInv p' = p
    where
        pu = reorder p'
        r' i = mod_pow (`Q, ROOTOFUNITYINV, i * 2)
        p = [ mod_mul(`Q, NINV, mod_mul(`Q, mod_pow(`Q, ROOTOFUNITYINV, i), (modSum (`Q, [mod_mul(`Q, (pu@jdx), (r' ((i*j))))
            | jdx <- [0..(N-1)]:[N][width N]
            | j <- [0..(N-1)]:Poly
            ]))))
            | i <- [0..(N-1)]:Poly
            ]

// Dilithium uses a non-standard ordering of elements in the NTT domain; this function reorders the elements.
reorder : NttPoly -> NttPoly
reorder a = join [ [ a1@i, a2@i ] | i <- [0..127]:[_][8] ]
        where
          a1 = a@@[ (i - 1)/2 | i <- [ reverse ((128 + i) : [8]) | i <- [0..127] ] ]
          a2 = reverse (a@@[ (511 - (zero#i):[9])/2 | i <- [ reverse ((128 + i) : [8]) | i <- [0..127] ] ])

// Operations on NTT polynomials
nttMatMul : { dim1, dim2 } (fin dim1, fin dim2) => NttMat dim1 dim2 -> NttVec dim2 -> NttVec dim1
nttMatMul mat vec = [ nttDotProduct v vec | v <- mat ]

nttDotProduct : { dim } (fin dim) => NttVec dim -> NttVec dim -> NttPoly
nttDotProduct v1 v2 = foldl polyAdd (zero:NttPoly) [ nttPolyMult p1 p2 | p1 <- v1 | p2 <- v2 ]

nttPolyMult : NttPoly -> NttPoly -> NttPoly
nttPolyMult p1 p2 = [ mod_mul(`Q, x, y) | x <- p1 | y <- p2 ]

nttVecConstMul : { dim } (fin dim) => NttPoly -> NttVec dim -> NttVec dim
nttVecConstMul c v = map (nttPolyMult c) v

polyVecSum : { dim } (fin dim) => PolyVec dim -> PolyVec dim -> PolyVec dim
polyVecSum v1 v2 = map nttInv (polyVecAdd (map ntt v1) (map ntt v2))
    
// Add polynomials 
polyAdd : Poly -> Poly -> Poly
polyAdd p1 p2 = [ mod_add(`Q, x, y) | x <- p1 | y <- p2 ]

polyVecAdd : { dim } (fin dim) => PolyVec dim -> PolyVec dim -> PolyVec dim
polyVecAdd v1 v2 = zipWith polyAdd v1 v2

// Subtract polynomials
polySub : Poly -> Poly -> Poly
polySub p1 p2 = [ mod_sub(`Q, x, y) | x <- p1 | y <- p2 ]

polyVecSub : { dim } (fin dim) => PolyVec dim -> PolyVec dim -> PolyVec dim
polyVecSub v1 v2 = zipWith polySub v1 v2

// polyChkNorm (from source code)
polyChkNorm : Poly -> [32] -> Bit
polyChkNorm a b = if ([ zero # (res i) >= b | i <- [0..255] ] != zero) then True else False
            where t i = ((`Q - 1) >> 1) - a@i
                  y x = x ^ (x >>$ 31)
                  res i = ((`Q - 1) >> 1) - (y (t i))

// polyVecKChkNorm (from source code)
polyVecChkNorm : { n } (fin n, n >= 1) => PolyVec n -> [32] -> Bit
polyVecChkNorm pv b = or [ polyChkNorm p b | p <- pv ]

// Aux functions
infNorm : [QBits] -> [QBits]
infNorm x =  (centeredMod x `Q)

infNormPoly : IntPoly -> [QBits]
infNormPoly p = foldl max 0 (map infNorm p)

infNormPolyVec : { dim } (fin dim, dim >= 1) => IntPolyVec dim -> [QBits]
infNormPolyVec v = foldl max 0 (map infNormPoly v)

mod_add : {a} (fin a) => ([a], [a], [a]) -> [a]
mod_add (q, x, y) = safe_mod(q, safe_add(x, y))

mod_sub : {a} (fin a) => ([a], [a], [a]) -> [a]
mod_sub (q, x, y) = safe_mod(q, safe_sub(x, y))

mod_mul : {a} (fin a) => ([a], [a], [a]) -> [a]
mod_mul (q, x, y) = safe_mod(q, safe_product(x, y))
