/*
 * Public interface for the WOTS+ one-time signature scheme.
 *
 * We expect that there will only be one implementation of this scheme.
 * However, to support its typical use as a component in a more complex scheme
 * (like XMSS and SPHINCS+), we want to allow other protocols to be
 * defined in terms of the generic WOTS, and then instantiated with both
 * WOTS-specific and scheme-specific parameters (and potentially with
 * additional interface constraints).
 *
 * Some documentation is duplicated between this interface and the
 * specification. This is based on the API in [RFC-8391].
 *
 * [RFC-8391]: Andreas Huelsing, Denis Butin, Stefan-Lukas Gazdag, Joost
 *     Rijneveld, and Aziz Mohaisen. XMSS: eXtended Merkle Signature Scheme.
 *     Internet Requests for Comments (RFC) 8391. May 2018.
 *     @see https://datatracker.ietf.org/doc/rfc8391
 *
 * @copyright Galois, Inc.
 * @author Marcella Hastings <marcella@galois.com>
 */
interface module Primitive::Asymmetric::Signature::WOTS::Interface where

/**
 * Security parameter.
 * This defines the message length, the length of a private key, the length
 * of a public key, and a signature element (in bytes).
 * [RFC-8391] Section 3.1.1.
 */
type n : #
type constraint (fin n)

/**
 * The Winternitz parameter. This must be either 4 or 16.
 * [RFC-8391] Section 3.1.1.
 *
 * The type constraint is a bit contrived, but it requires that
 * `w` is in the range `[0, 16]`, is divisible by 4 (`{0, 4, 8, 12, 16}`),
 * and is congruent to 1 mod 3 (`{4, 16}`).
 */
type w : #
type constraint (fin w, w % 4 == 0, w % 3 == 1, w <= 16)

/**
 * A keyed cryptographic hash function that takes a key and a message.
 * [RFC-8391] Section 3.1.1.1.
 */
F : [n][8] -> [n][8] -> [n][8]

/**
 * A pseudorandom function that takes a key and an index.
 * [RFC-8391] Section 3.1.1.1.
 */
PRF : [n][8] -> [32][8] -> [n][8]

/**
 * A length value (fixed with respect to `n` and `w`).
 * [RFC-8391] Section 3.1.1.
 */
type len_1 = (8 * n) /^ (lg2 w)

/**
 * A length value (fixed with respect to `n` and `w`).
 * [RFC-8391] Section 3.1.1.
 */

type len_2 = lg2 (len_1 * (w - 1)) / lg2 w + 1

/**
 * The number of `n`-byte string elements in a WOTS+ private key, public key,
 * and signature.
 * [RFC-8391] Section 3.1.1.
 */
type len = len_1 + len_2
/**
 * This constraint comes from the fact that we set locations in `Address` to
 * functions of `len` (in particular, `len / 2`). These locations are 32 bits
 * in size, so we require that `width len` is no greater than 32 bits.
 */
type constraint (width len <= 32)

/**
 * A byte is a sequence of 8 bits using big-endian representation.
 * [RFC-8391] Section 2.1.
 */
type Byte = [8]

/**
 * Convert a non-negative integer to a binary representation in big-endian
 * byte order.
 * [RFC-8391] Section 2.4.
 *
 * Note: the spec is not explicit about what to do when `m < 8y` -- e.g. when
 * converting to `y` bytes means truncating the integer representation,
 * rather than padding it with 0s. We chose this behavior based on the
 * reference implementation that accompanies the spec.
 * @see https://github.com/XMSS/xmss-reference/blob/master/utils.c#L6
 * [RFC-8391] Section 7.
 *
 * Essentially, we pad with zeros if needed (using `zext`), then `drop` any
 * unnecessary padding (and potentially also drop some bits of the original
 * integer).
 */
toByte : {y, m} (fin y, fin m) => [m] -> [y]Byte

/**
 * An n-byte value used as the key to a PRF.
 *
 * This type is not formally defined in the spec but is defined here for
 * clarity.
 *
 * [RFC-8391] Section 2.5.
 */
type Seed = [n]Byte

/**
 * Address scheme for randomizing hash function calls in the OTS scheme.
 * [RFC-8391] Section 2.5.
 */
type Address = [8 * 4]Byte

/**
 * Address scheme for randomizing hash function calls in the OTS scheme.
 * [RFC-8391] Section 2.5.
 *
 * The address breaks down 7 components, each 1 word long unless specified.
 * 1. Layer address
 * 2-3. Tree address (2 Words)
 * 4. Type (fixed at 0)
 * 5. OTS address
 * 6. Chain address
 * 7. Hash address
 * 8. keyAndMask
 *
 * Note that this isn't defined in terms of the `Word` type because it's
 * operated on by things that require arrays of bytes.
 */
type OTSHashAddress = [8 * 4]Byte

/**
 * A private, or secret, key in WOTS+ is a length `len` array of `n`-byte
 * strings.
 *
 * It represents the start nodes in a set of hash chains.
 *
 * ⚠️ Warning ⚠️: A private key MUST be selected randomly from the uniform
 * distribution or selected using a cryptographically secure pseudorandom
 * process! Cryptol cannot verify that a `PrivateKey` was chosen suitably!
 * Implementors must independently audit private key generation!
 *
 * [RFC-8391] Section 3.1.3.
 *
 * An implementation may also use a cryptographically secure pseudorandom
 * method to generate the private key from a single `n`-byte value. See
 * [RFC-8391] Section 3.1.7 for a sample method.
 */
type PrivateKey = [len][n]Byte

/**
 * A WOTS+ public key is a length `len` array of `n`-byte strings.
 *
 * It represents the end nodes i a set of length-`w` hash chains, where the
 * start nodes are defined in the corresponding `PrivateKey`.
 */
type PublicKey = [len][n]Byte

/**
 * A WOTS+ signature.
 * [RFC-8391] Section 3.1.5.
 */
type Signature = [len][n]Byte

/**
 * Generate a WOTS+ public key from a private key.
 * [RFC-8391] Section 3.1.4, Algorithm 4 (called `WOTS_genPK` in the spec).
 * [Errata-8382] @see https://www.rfc-editor.org/errata/eid8382
 */
genPK : PrivateKey -> [n]Byte -> Address -> PublicKey

/**
 * Generate a signature from a private key and a message.
 * [RFC-8391] Section 3.1.5, Algorithm 5 (called `WOTS_sign` in the spec).
 */
sign : [n]Byte -> PrivateKey -> Address -> [n]Byte -> Signature

/**
 * Compute a WOTS+ public key from a message and its signature.
 * [RFC-8391] Section 3.1.6, Algorithm 6 (called `WOTS_pkFromSig` in the spec).
 *
 * The result of this function must be compared to the given public key. If
 * the values are not equal, the signature MUST be rejected. This algorithm
 * does not actually reject any signatures!!
 */
pkFromSig : [n]Byte -> Signature -> Address -> [n]Byte -> PublicKey
