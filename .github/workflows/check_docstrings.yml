# Checks the docstring tests pass.
# Leverages cached dependencies and dependency analysis to speed this up.
#
# @copyright Galois, Inc
# @author John Christensen <jchristensen@galois.com>
#

name: Check docstrings

on:
  # Run on a PR to master
  pull_request:
    branches: [master]
  # Run on pushing to master
  push:
    branches: [master]
  # Run on master on Sundays
  schedule: [ cron: '0 17 * * 0' ]

jobs:
  check-docstrings:
    runs-on: ubuntu-latest
    # Permissions are required to delete the cache key.
    permissions:
      actions: write
      contents: read
    env:
      # This is the relative path to the Cryptol project directory.
      CRYPTOL_PROJECT: .
      # This is the relative path to the Cryptol cache.
      CRYPTOL_CACHE: ${{ github.workspace }}/.cryproject/loadcache.toml
      # This is the key for the cache.
      # Note that GITHUB_HEAD_REF is only available on pull requests.
      # If we want to expand the scope of caching beyond these
      # circumstances, we'll need to rethink the keying strategy.
      CRYPTOL_CACHE_KEY: ${{ github.head_ref || github.ref_name }}
      CRYPTOL_DEFAULT_KEY: master
      # In order to use Github CLI in a workflow, we need
      # the token that is generated for this workflow.
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    container:
      image: ghcr.io/galoisinc/cryptol:nightly
      options: --user root
    steps:
      # Install dependencies.
      # We require the github CLI tool to delete caches.
      # We require git to run the github CLI tool.
      - name: Installing dependencies..
        run: |
          apt-get update && apt-get install -y git wget
          wget https://github.com/cli/cli/releases/download/v2.69.0/gh_2.69.0_linux_amd64.tar.gz
          tar xzvf gh_2.69.0_linux_amd64.tar.gz
          mv gh_2.69.0_linux_amd64/bin/gh /usr/local/bin/
      # Check out the code.
      - id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # Check if this branch has a cache.
      # We do not use the 'restore-keys' option to implicitly load
      # a backup if this fails, instead preferring the explicit check.
      - id: load-cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.CRYPTOL_CACHE }}
          key: ${{ env.CRYPTOL_CACHE_KEY }}
      # If the cache has missed, attempt to load
      # the cache from the master branch.
      - id: load-cache-fallback
        uses: actions/cache/restore@v4
        if: steps.load-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ env.CRYPTOL_CACHE }}
          key: ${{ env.CRYPTOL_DEFAULT_KEY }}
      # Run the check-docstrings script, regardless of cache load.
      # This also deletes the current cache key in preparation to upload a new cache.
      - name: "Run the check-docstrings script."
        run: |
          git config --global --add safe.directory '*'
          echo "Check which caches exist, for sanity."
          gh cache list
          bash scripts/check_docstrings.sh .
          # if the cache doesn't exist for this branch, no sweat!
          # we will just upload the one we create.
          echo "Deleting cache key: ${{ env.CRYPTOL_CACHE_KEY }}"
          gh cache delete ${{ env.CRYPTOL_CACHE_KEY }} || true
      # Cache the .cryproject/* files.
      # Cache is scoped to branch, commit, and cache version.
      # Note that GITHUB_HEAD_REF only available on pull requests.
      # If we want to expand the scope of caching beyond these
      # circumstances, we'll need to rethink the keying strategy.
      - id: save-cache
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CRYPTOL_CACHE }}
          key: ${{ env.CRYPTOL_CACHE_KEY }}
